
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b34  08003b34  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08003b34  08003b34  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b34  08003b34  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200000cc  08003c08  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003c08  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7e8  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c14  00000000  00000000  0002a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a87  00000000  00000000  0002d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b678  00000000  00000000  00046287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce90  00000000  00000000  000518ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  000de7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a38 	.word	0x08003a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08003a38 	.word	0x08003a38

0800014c <char_to_hex>:
	if (rxBuffer[data] < 58) number = number+(rxBuffer[data]-48); else number = number+(rxBuffer[data]-55);
	return number;
}

// char number to string hex (FF) (Only big letters!)
void char_to_hex(uint8_t data) {
 800014c:	b490      	push	{r4, r7}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t digits[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <char_to_hex+0x60>)
 8000158:	f107 0408 	add.w	r4, r7, #8
 800015c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800015e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (data < 16) {
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b0f      	cmp	r3, #15
 8000166:	d80a      	bhi.n	800017e <char_to_hex+0x32>
		retstr[0] = '0';
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <char_to_hex+0x64>)
 800016a:	2230      	movs	r2, #48	; 0x30
 800016c:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[data];
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	3318      	adds	r3, #24
 8000172:	443b      	add	r3, r7
 8000174:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000178:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <char_to_hex+0x64>)
 800017a:	705a      	strb	r2, [r3, #1]
	} else {
		retstr[0] = digits[(data & 0xF0)>>4];
		retstr[1] = digits[(data & 0x0F)];
	}
}
 800017c:	e011      	b.n	80001a2 <char_to_hex+0x56>
		retstr[0] = digits[(data & 0xF0)>>4];
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	091b      	lsrs	r3, r3, #4
 8000182:	b2db      	uxtb	r3, r3
 8000184:	3318      	adds	r3, #24
 8000186:	443b      	add	r3, r7
 8000188:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <char_to_hex+0x64>)
 800018e:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[(data & 0x0F)];
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	f003 030f 	and.w	r3, r3, #15
 8000196:	3318      	adds	r3, #24
 8000198:	443b      	add	r3, r7
 800019a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800019e:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <char_to_hex+0x64>)
 80001a0:	705a      	strb	r2, [r3, #1]
}
 80001a2:	bf00      	nop
 80001a4:	3718      	adds	r7, #24
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc90      	pop	{r4, r7}
 80001aa:	4770      	bx	lr
 80001ac:	08003a50 	.word	0x08003a50
 80001b0:	20000190 	.word	0x20000190

080001b4 <led>:
	retstr[8] = i+0x30;

	retstr[9] = number+0x30;
}

void led(uint8_t n) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<n; i++) {
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]
 80001c2:	e014      	b.n	80001ee <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);			          // LED1 ON
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	480d      	ldr	r0, [pc, #52]	; (8000200 <led+0x4c>)
 80001cc:	f001 fa11 	bl	80015f2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001d0:	2064      	movs	r0, #100	; 0x64
 80001d2:	f000 ff4f 	bl	8001074 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				          // LED1 OFF
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001dc:	4808      	ldr	r0, [pc, #32]	; (8000200 <led+0x4c>)
 80001de:	f001 fa08 	bl	80015f2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001e2:	2064      	movs	r0, #100	; 0x64
 80001e4:	f000 ff46 	bl	8001074 <HAL_Delay>
	for (uint8_t i=0; i<n; i++) {
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	3301      	adds	r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	7bfa      	ldrb	r2, [r7, #15]
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3e6      	bcc.n	80001c4 <led+0x10>
	}
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40011000 	.word	0x40011000

08000204 <main>:
/* USER CODE END 0 */

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fed2 	bl	8000fb0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f9b0 	bl	8000570 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 fa66 	bl	80006e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000214:	f000 fa04 	bl	8000620 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000218:	f000 fa38 	bl	800068c <MX_USART1_UART_Init>


  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);			         				// LED2 ON
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	4877      	ldr	r0, [pc, #476]	; (8000400 <main+0x1fc>)
 8000222:	f001 f9e6 	bl	80015f2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000226:	200a      	movs	r0, #10
 8000228:	f000 ff24 	bl	8001074 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);				     				// LED2 OFF
 800022c:	2200      	movs	r2, #0
 800022e:	2101      	movs	r1, #1
 8000230:	4873      	ldr	r0, [pc, #460]	; (8000400 <main+0x1fc>)
 8000232:	f001 f9de 	bl	80015f2 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000236:	2032      	movs	r0, #50	; 0x32
 8000238:	f000 ff1c 	bl	8001074 <HAL_Delay>

	led(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f7ff ffb9 	bl	80001b4 <led>
	MFRC522_Init();
 8000242:	f000 fcb8 	bl	8000bb6 <MFRC522_Init>
	led(1);
 8000246:	2001      	movs	r0, #1
 8000248:	f7ff ffb4 	bl	80001b4 <led>
	HAL_UART_Transmit(&huart1, text1, 63, 100);
 800024c:	2364      	movs	r3, #100	; 0x64
 800024e:	223f      	movs	r2, #63	; 0x3f
 8000250:	496c      	ldr	r1, [pc, #432]	; (8000404 <main+0x200>)
 8000252:	486d      	ldr	r0, [pc, #436]	; (8000408 <main+0x204>)
 8000254:	f002 f9d6 	bl	8002604 <HAL_UART_Transmit>
	printf(text1);
 8000258:	486a      	ldr	r0, [pc, #424]	; (8000404 <main+0x200>)
 800025a:	f002 fbe3 	bl	8002a24 <iprintf>
	led(1);
 800025e:	2001      	movs	r0, #1
 8000260:	f7ff ffa8 	bl	80001b4 <led>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	4969      	ldr	r1, [pc, #420]	; (800040c <main+0x208>)
 8000268:	4867      	ldr	r0, [pc, #412]	; (8000408 <main+0x204>)
 800026a:	f002 fa4e 	bl	800270a <HAL_UART_Receive_IT>
  while (1)
  {
  /* USER CODE END WHILE */
	  //printf ("Start");
  /* USER CODE BEGIN 3 */
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 800026e:	4968      	ldr	r1, [pc, #416]	; (8000410 <main+0x20c>)
 8000270:	2026      	movs	r0, #38	; 0x26
 8000272:	f000 fb6f 	bl	8000954 <MFRC522_Request>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	f040 80b5 	bne.w	80003e8 <main+0x1e4>
			if (!MFRC522_Anticoll(str)) {
 800027e:	4864      	ldr	r0, [pc, #400]	; (8000410 <main+0x20c>)
 8000280:	f000 fc5c 	bl	8000b3c <MFRC522_Anticoll>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	f040 80ae 	bne.w	80003e8 <main+0x1e4>
				j = 0;
 800028c:	4b61      	ldr	r3, [pc, #388]	; (8000414 <main+0x210>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
				q = 0;
 8000292:	4b61      	ldr	r3, [pc, #388]	; (8000418 <main+0x214>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
				b = 9;
 8000298:	4b60      	ldr	r3, [pc, #384]	; (800041c <main+0x218>)
 800029a:	2209      	movs	r2, #9
 800029c:	701a      	strb	r2, [r3, #0]
				en = 1;
 800029e:	4b60      	ldr	r3, [pc, #384]	; (8000420 <main+0x21c>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	701a      	strb	r2, [r3, #0]

				for (i=0; i<4; i++) if (lastID[i] != str[i]) j = 1;								// Repeat test
 80002a4:	4b5f      	ldr	r3, [pc, #380]	; (8000424 <main+0x220>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
 80002aa:	e014      	b.n	80002d6 <main+0xd2>
 80002ac:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <main+0x220>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b5d      	ldr	r3, [pc, #372]	; (8000428 <main+0x224>)
 80002b4:	5c9a      	ldrb	r2, [r3, r2]
 80002b6:	4b5b      	ldr	r3, [pc, #364]	; (8000424 <main+0x220>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4b54      	ldr	r3, [pc, #336]	; (8000410 <main+0x20c>)
 80002be:	5c5b      	ldrb	r3, [r3, r1]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d002      	beq.n	80002ca <main+0xc6>
 80002c4:	4b53      	ldr	r3, [pc, #332]	; (8000414 <main+0x210>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	4b56      	ldr	r3, [pc, #344]	; (8000424 <main+0x220>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b54      	ldr	r3, [pc, #336]	; (8000424 <main+0x220>)
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	4b53      	ldr	r3, [pc, #332]	; (8000424 <main+0x220>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d9e6      	bls.n	80002ac <main+0xa8>

				if (j && en) {
 80002de:	4b4d      	ldr	r3, [pc, #308]	; (8000414 <main+0x210>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d07d      	beq.n	80003e2 <main+0x1de>
 80002e6:	4b4e      	ldr	r3, [pc, #312]	; (8000420 <main+0x21c>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d079      	beq.n	80003e2 <main+0x1de>
					q = 0;
 80002ee:	4b4a      	ldr	r3, [pc, #296]	; (8000418 <main+0x214>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
					en = 0;
 80002f4:	4b4a      	ldr	r3, [pc, #296]	; (8000420 <main+0x21c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
					for (i=0; i<4; i++) lastID[i] = str[i];
 80002fa:	4b4a      	ldr	r3, [pc, #296]	; (8000424 <main+0x220>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e00f      	b.n	8000322 <main+0x11e>
 8000302:	4b48      	ldr	r3, [pc, #288]	; (8000424 <main+0x220>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4619      	mov	r1, r3
 8000308:	4b46      	ldr	r3, [pc, #280]	; (8000424 <main+0x220>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b40      	ldr	r3, [pc, #256]	; (8000410 <main+0x20c>)
 8000310:	5c59      	ldrb	r1, [r3, r1]
 8000312:	4b45      	ldr	r3, [pc, #276]	; (8000428 <main+0x224>)
 8000314:	5499      	strb	r1, [r3, r2]
 8000316:	4b43      	ldr	r3, [pc, #268]	; (8000424 <main+0x220>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b41      	ldr	r3, [pc, #260]	; (8000424 <main+0x220>)
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	4b40      	ldr	r3, [pc, #256]	; (8000424 <main+0x220>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b03      	cmp	r3, #3
 8000328:	d9eb      	bls.n	8000302 <main+0xfe>
					//HAL_UART_Transmit(&huart1, text2, 9, 100);
					for (i=0; i<4; i++) {
 800032a:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <main+0x220>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	e027      	b.n	8000382 <main+0x17e>
						char_to_hex(str[i]);
 8000332:	4b3c      	ldr	r3, [pc, #240]	; (8000424 <main+0x220>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <main+0x20c>)
 800033a:	5c9b      	ldrb	r3, [r3, r2]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff05 	bl	800014c <char_to_hex>
						txBuffer[b] = retstr[0];
 8000342:	4b36      	ldr	r3, [pc, #216]	; (800041c <main+0x218>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	461a      	mov	r2, r3
 8000348:	4b38      	ldr	r3, [pc, #224]	; (800042c <main+0x228>)
 800034a:	7819      	ldrb	r1, [r3, #0]
 800034c:	4b38      	ldr	r3, [pc, #224]	; (8000430 <main+0x22c>)
 800034e:	5499      	strb	r1, [r3, r2]
						b++;
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <main+0x218>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b30      	ldr	r3, [pc, #192]	; (800041c <main+0x218>)
 800035a:	701a      	strb	r2, [r3, #0]
						txBuffer[b] = retstr[1];
 800035c:	4b2f      	ldr	r3, [pc, #188]	; (800041c <main+0x218>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b32      	ldr	r3, [pc, #200]	; (800042c <main+0x228>)
 8000364:	7859      	ldrb	r1, [r3, #1]
 8000366:	4b32      	ldr	r3, [pc, #200]	; (8000430 <main+0x22c>)
 8000368:	5499      	strb	r1, [r3, r2]
						b++;
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <main+0x218>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <main+0x218>)
 8000374:	701a      	strb	r2, [r3, #0]
					for (i=0; i<4; i++) {
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <main+0x220>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <main+0x220>)
 8000380:	701a      	strb	r2, [r3, #0]
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <main+0x220>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d9d3      	bls.n	8000332 <main+0x12e>
						//ToStr(str[i]);
						//HAL_UART_Transmit(&huart1, retstr, 10, 100);
					}
					//HAL_UART_Transmit(&huart1, end, 1, 100);
					HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 800038a:	2364      	movs	r3, #100	; 0x64
 800038c:	2212      	movs	r2, #18
 800038e:	4928      	ldr	r1, [pc, #160]	; (8000430 <main+0x22c>)
 8000390:	481d      	ldr	r0, [pc, #116]	; (8000408 <main+0x204>)
 8000392:	f002 f937 	bl	8002604 <HAL_UART_Transmit>
					printf(txBuffer);
 8000396:	4826      	ldr	r0, [pc, #152]	; (8000430 <main+0x22c>)
 8000398:	f002 fb44 	bl	8002a24 <iprintf>

					ok = 1;
 800039c:	4b25      	ldr	r3, [pc, #148]	; (8000434 <main+0x230>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
					for (i=0; i<8; i++) if (txBuffer[9+i] != memID[i]) ok = 0;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <main+0x220>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e014      	b.n	80003d4 <main+0x1d0>
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <main+0x220>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	3309      	adds	r3, #9
 80003b0:	4a1f      	ldr	r2, [pc, #124]	; (8000430 <main+0x22c>)
 80003b2:	5cd2      	ldrb	r2, [r2, r3]
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <main+0x220>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <main+0x234>)
 80003bc:	5c5b      	ldrb	r3, [r3, r1]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d002      	beq.n	80003c8 <main+0x1c4>
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0x230>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <main+0x220>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <main+0x220>)
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <main+0x220>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b07      	cmp	r3, #7
 80003da:	d9e6      	bls.n	80003aa <main+0x1a6>
					led(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f7ff fee9 	bl	80001b4 <led>
				}

				led(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff fee6 	bl	80001b4 <led>
			}
		}

		if (ok == 1) {
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <main+0x230>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d13f      	bne.n	8000470 <main+0x26c>
			ok = 0;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <main+0x230>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
			for (i=0; i<10; i++) {
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <main+0x220>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	e034      	b.n	8000468 <main+0x264>
 80003fe:	bf00      	nop
 8000400:	40010800 	.word	0x40010800
 8000404:	20000000 	.word	0x20000000
 8000408:	20000140 	.word	0x20000140
 800040c:	2000019c 	.word	0x2000019c
 8000410:	200001a8 	.word	0x200001a8
 8000414:	20000189 	.word	0x20000189
 8000418:	2000018b 	.word	0x2000018b
 800041c:	2000018a 	.word	0x2000018a
 8000420:	2000018c 	.word	0x2000018c
 8000424:	20000188 	.word	0x20000188
 8000428:	200001a4 	.word	0x200001a4
 800042c:	20000190 	.word	0x20000190
 8000430:	20000040 	.word	0x20000040
 8000434:	2000018d 	.word	0x2000018d
 8000438:	20000054 	.word	0x20000054
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);			         	// LED2 ON
 800043c:	2201      	movs	r2, #1
 800043e:	2101      	movs	r1, #1
 8000440:	4840      	ldr	r0, [pc, #256]	; (8000544 <main+0x340>)
 8000442:	f001 f8d6 	bl	80015f2 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	; 0x32
 8000448:	f000 fe14 	bl	8001074 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);				     	// LED2 OFF
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	483c      	ldr	r0, [pc, #240]	; (8000544 <main+0x340>)
 8000452:	f001 f8ce 	bl	80015f2 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000456:	2064      	movs	r0, #100	; 0x64
 8000458:	f000 fe0c 	bl	8001074 <HAL_Delay>
			for (i=0; i<10; i++) {
 800045c:	4b3a      	ldr	r3, [pc, #232]	; (8000548 <main+0x344>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b38      	ldr	r3, [pc, #224]	; (8000548 <main+0x344>)
 8000466:	701a      	strb	r2, [r3, #0]
 8000468:	4b37      	ldr	r3, [pc, #220]	; (8000548 <main+0x344>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b09      	cmp	r3, #9
 800046e:	d9e5      	bls.n	800043c <main+0x238>
			}
		}

		if (huart1.RxXferCount == 0) {
 8000470:	4b36      	ldr	r3, [pc, #216]	; (800054c <main+0x348>)
 8000472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000474:	b29b      	uxth	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d11e      	bne.n	80004b8 <main+0x2b4>
			led(1);
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff fe9a 	bl	80001b4 <led>
			comand = rxBuffer[0];
 8000480:	4b33      	ldr	r3, [pc, #204]	; (8000550 <main+0x34c>)
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <main+0x350>)
 8000486:	701a      	strb	r2, [r3, #0]
			if (comand == '1') {
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <main+0x350>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b31      	cmp	r3, #49	; 0x31
 800048e:	d10e      	bne.n	80004ae <main+0x2aa>
				led(1);
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff fe8f 	bl	80001b4 <led>
				HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 8000496:	2364      	movs	r3, #100	; 0x64
 8000498:	2212      	movs	r2, #18
 800049a:	492f      	ldr	r1, [pc, #188]	; (8000558 <main+0x354>)
 800049c:	482b      	ldr	r0, [pc, #172]	; (800054c <main+0x348>)
 800049e:	f002 f8b1 	bl	8002604 <HAL_UART_Transmit>
				printf(txBuffer);
 80004a2:	482d      	ldr	r0, [pc, #180]	; (8000558 <main+0x354>)
 80004a4:	f002 fabe 	bl	8002a24 <iprintf>
				printf("test 1");
 80004a8:	482c      	ldr	r0, [pc, #176]	; (800055c <main+0x358>)
 80004aa:	f002 fabb 	bl	8002a24 <iprintf>
			}
			HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	4927      	ldr	r1, [pc, #156]	; (8000550 <main+0x34c>)
 80004b2:	4826      	ldr	r0, [pc, #152]	; (800054c <main+0x348>)
 80004b4:	f002 f929 	bl	800270a <HAL_UART_Receive_IT>
		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80004b8:	2102      	movs	r1, #2
 80004ba:	4822      	ldr	r0, [pc, #136]	; (8000544 <main+0x340>)
 80004bc:	f001 f882 	bl	80015c4 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d119      	bne.n	80004fa <main+0x2f6>
			HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 80004c6:	2364      	movs	r3, #100	; 0x64
 80004c8:	2212      	movs	r2, #18
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <main+0x354>)
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <main+0x348>)
 80004ce:	f002 f899 	bl	8002604 <HAL_UART_Transmit>
			printf(txBuffer);
 80004d2:	4821      	ldr	r0, [pc, #132]	; (8000558 <main+0x354>)
 80004d4:	f002 faa6 	bl	8002a24 <iprintf>
			printf("test 2\n");
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <main+0x35c>)
 80004da:	f002 fb29 	bl	8002b30 <puts>
			led(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff fe68 	bl	80001b4 <led>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 80004e4:	bf00      	nop
 80004e6:	2102      	movs	r1, #2
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <main+0x340>)
 80004ea:	f001 f86b 	bl	80015c4 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f8      	beq.n	80004e6 <main+0x2e2>
			HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 fdbd 	bl	8001074 <HAL_Delay>
		}

		q++;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <main+0x360>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0x360>)
 8000504:	701a      	strb	r2, [r3, #0]
		if (!q) {
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <main+0x360>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d116      	bne.n	800053c <main+0x338>
			en = 1;																															// Delay against scan kode
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0x364>)
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
			for (i=0; i<4; i++) lastID[i] = 0;																	// Delay reading the same card 3s
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <main+0x344>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e00b      	b.n	8000534 <main+0x330>
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x344>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <main+0x368>)
 8000524:	2100      	movs	r1, #0
 8000526:	5499      	strb	r1, [r3, r2]
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <main+0x344>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <main+0x344>)
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <main+0x344>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d9ef      	bls.n	800051c <main+0x318>
		}
		HAL_Delay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fd99 	bl	8001074 <HAL_Delay>
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 8000542:	e694      	b.n	800026e <main+0x6a>
 8000544:	40010800 	.word	0x40010800
 8000548:	20000188 	.word	0x20000188
 800054c:	20000140 	.word	0x20000140
 8000550:	2000019c 	.word	0x2000019c
 8000554:	2000018e 	.word	0x2000018e
 8000558:	20000040 	.word	0x20000040
 800055c:	08003a60 	.word	0x08003a60
 8000560:	08003a68 	.word	0x08003a68
 8000564:	2000018b 	.word	0x2000018b
 8000568:	2000018c 	.word	0x2000018c
 800056c:	200001a4 	.word	0x200001a4

08000570 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f843 	bl	8001624 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x38>
  {
    Error_Handler();
 80005a4:	f000 f910 	bl	80007c8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2102      	movs	r1, #2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 faaf 	bl	8001b28 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005d0:	f000 f8fa 	bl	80007c8 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d4:	2310      	movs	r3, #16
 80005d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fc30 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ea:	f000 f8ed 	bl	80007c8 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005ee:	f001 fbd9 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <SystemClock_Config+0xac>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	099b      	lsrs	r3, r3, #6
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe34 	bl	800126a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000602:	2004      	movs	r0, #4
 8000604:	f000 fe3e 	bl	8001284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 fe0f 	bl	8001232 <HAL_NVIC_SetPriority>
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	10624dd3 	.word	0x10624dd3

08000620 <MX_SPI2_Init>:

/* SPI1 init function */
static void MX_SPI2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_SPI2_Init+0x64>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <MX_SPI2_Init+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_SPI2_Init+0x64>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_SPI2_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_SPI2_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_SPI2_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_SPI2_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_SPI2_Init+0x64>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_SPI2_Init+0x64>)
 8000654:	2218      	movs	r2, #24
 8000656:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_SPI2_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_SPI2_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_SPI2_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_SPI2_Init+0x64>)
 800066c:	220a      	movs	r2, #10
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_SPI2_Init+0x64>)
 8000672:	f001 fc9d 	bl	8001fb0 <HAL_SPI_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800067c:	f000 f8a4 	bl	80007c8 <Error_Handler>
  }

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000e8 	.word	0x200000e8
 8000688:	40003800 	.word	0x40003800

0800068c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f001 ff4e 	bl	8002564 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f87b 	bl	80007c8 <Error_Handler>
  }

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000140 	.word	0x20000140
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_GPIO_Init+0xb8>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <MX_GPIO_Init+0xb8>)
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_GPIO_Init+0xb8>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xb8>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <MX_GPIO_Init+0xb8>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <MX_GPIO_Init+0xbc>)
 8000736:	f000 ff5c 	bl	80015f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2111      	movs	r1, #17
 800073e:	4818      	ldr	r0, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000740:	f000 ff57 	bl	80015f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <MX_GPIO_Init+0xbc>)
 800075a:	f000 fdaf 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800075e:	2311      	movs	r3, #17
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000772:	f000 fda3 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0xc0>)
 800078a:	f000 fd97 	bl	80012bc <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	40011000 	.word	0x40011000
 80007a0:	40010800 	.word	0x40010800

080007a4 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <__io_putchar+0x20>)
 80007b4:	f001 ff26 	bl	8002604 <HAL_UART_Transmit>


 return ch;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000140 	.word	0x20000140

080007c8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x4>
	...

080007d0 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	230a      	movs	r3, #10
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <SPI1SendByte+0x2c>)
 80007ee:	f001 fc63 	bl	80020b8 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80007f2:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000e8 	.word	0x200000e8

08000800 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <SPI1_WriteReg+0x3c>)
 8000816:	f000 feec 	bl	80015f2 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ffd7 	bl	80007d0 <SPI1SendByte>
	SPI1SendByte(value);
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffd3 	bl	80007d0 <SPI1SendByte>
	cs_set();
 800082a:	2201      	movs	r2, #1
 800082c:	2110      	movs	r1, #16
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <SPI1_WriteReg+0x3c>)
 8000830:	f000 fedf 	bl	80015f2 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010800 	.word	0x40010800

08000840 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800084a:	2200      	movs	r2, #0
 800084c:	2110      	movs	r1, #16
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <SPI1_ReadReg+0x3c>)
 8000850:	f000 fecf 	bl	80015f2 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffba 	bl	80007d0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffb7 	bl	80007d0 <SPI1SendByte>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <SPI1_ReadReg+0x3c>)
 800086c:	f000 fec1 	bl	80015f2 <HAL_GPIO_WritePin>
	return val;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010800 	.word	0x40010800

08000880 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800089a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffac 	bl	8000800 <SPI1_WriteReg>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffb5 	bl	8000840 <SPI1_ReadReg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]
	return val;	
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffda 	bl	80008b0 <MFRC522_ReadRegister>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	4313      	orrs	r3, r2
 8000904:	b2da      	uxtb	r2, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffb8 	bl	8000880 <MFRC522_WriteRegister>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffc0 	bl	80008b0 <MFRC522_ReadRegister>
 8000930:	4603      	mov	r3, r0
 8000932:	b25a      	sxtb	r2, r3
 8000934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000938:	43db      	mvns	r3, r3
 800093a:	b25b      	sxtb	r3, r3
 800093c:	4013      	ands	r3, r2
 800093e:	b25b      	sxtb	r3, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff9a 	bl	8000880 <MFRC522_WriteRegister>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af02      	add	r7, sp, #8
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000960:	2107      	movs	r1, #7
 8000962:	200d      	movs	r0, #13
 8000964:	f7ff ff8c 	bl	8000880 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2201      	movs	r2, #1
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	200c      	movs	r0, #12
 800097c:	f000 f80f 	bl	800099e <MFRC522_ToCard>
 8000980:	4603      	mov	r3, r0
 8000982:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <MFRC522_Request+0x3c>
 800098a:	89bb      	ldrh	r3, [r7, #12]
 800098c:	2b10      	cmp	r3, #16
 800098e:	d001      	beq.n	8000994 <MFRC522_Request+0x40>
 8000990:	2302      	movs	r3, #2
 8000992:	73fb      	strb	r3, [r7, #15]
	return status;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800099e:	b590      	push	{r4, r7, lr}
 80009a0:	b087      	sub	sp, #28
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	4613      	mov	r3, r2
 80009ae:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80009b0:	2302      	movs	r3, #2
 80009b2:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80009b8:	2300      	movs	r3, #0
 80009ba:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b0c      	cmp	r3, #12
 80009c0:	d006      	beq.n	80009d0 <MFRC522_ToCard+0x32>
 80009c2:	2b0e      	cmp	r3, #14
 80009c4:	d109      	bne.n	80009da <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80009c6:	2312      	movs	r3, #18
 80009c8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80009ca:	2310      	movs	r3, #16
 80009cc:	757b      	strb	r3, [r7, #21]
			break;
 80009ce:	e005      	b.n	80009dc <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80009d0:	2377      	movs	r3, #119	; 0x77
 80009d2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80009d4:	2330      	movs	r3, #48	; 0x30
 80009d6:	757b      	strb	r3, [r7, #21]
			break;
 80009d8:	e000      	b.n	80009dc <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80009da:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80009dc:	7dbb      	ldrb	r3, [r7, #22]
 80009de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff ff4a 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	2004      	movs	r0, #4
 80009f0:	f7ff ff92 	bl	8000918 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	200a      	movs	r0, #10
 80009f8:	f7ff ff74 	bl	80008e4 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff ff3e 	bl	8000880 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000a04:	2300      	movs	r3, #0
 8000a06:	827b      	strh	r3, [r7, #18]
 8000a08:	e00a      	b.n	8000a20 <MFRC522_ToCard+0x82>
 8000a0a:	8a7b      	ldrh	r3, [r7, #18]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	2009      	movs	r0, #9
 8000a16:	f7ff ff33 	bl	8000880 <MFRC522_WriteRegister>
 8000a1a:	8a7b      	ldrh	r3, [r7, #18]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	827b      	strh	r3, [r7, #18]
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	8a7a      	ldrh	r2, [r7, #18]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3ef      	bcc.n	8000a0a <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff ff26 	bl	8000880 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b0c      	cmp	r3, #12
 8000a38:	d103      	bne.n	8000a42 <MFRC522_ToCard+0xa4>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	200d      	movs	r0, #13
 8000a3e:	f7ff ff51 	bl	80008e4 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a46:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f7ff ff31 	bl	80008b0 <MFRC522_ReadRegister>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	753b      	strb	r3, [r7, #20]
		i--;
 8000a52:	8a7b      	ldrh	r3, [r7, #18]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000a58:	8a7b      	ldrh	r3, [r7, #18]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00a      	beq.n	8000a74 <MFRC522_ToCard+0xd6>
 8000a5e:	7d3b      	ldrb	r3, [r7, #20]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d105      	bne.n	8000a74 <MFRC522_ToCard+0xd6>
 8000a68:	7d3a      	ldrb	r2, [r7, #20]
 8000a6a:	7d7b      	ldrb	r3, [r7, #21]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0e9      	beq.n	8000a48 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	200d      	movs	r0, #13
 8000a78:	f7ff ff4e 	bl	8000918 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000a7c:	8a7b      	ldrh	r3, [r7, #18]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d057      	beq.n	8000b32 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000a82:	2006      	movs	r0, #6
 8000a84:	f7ff ff14 	bl	80008b0 <MFRC522_ReadRegister>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f003 031b 	and.w	r3, r3, #27
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000a96:	7d3a      	ldrb	r2, [r7, #20]
 8000a98:	7dbb      	ldrb	r3, [r7, #22]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MFRC522_ToCard+0x10c>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	2b0c      	cmp	r3, #12
 8000aae:	d140      	bne.n	8000b32 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f7ff fefd 	bl	80008b0 <MFRC522_ReadRegister>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000aba:	200c      	movs	r0, #12
 8000abc:	f7ff fef8 	bl	80008b0 <MFRC522_ReadRegister>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000ac8:	7c7b      	ldrb	r3, [r7, #17]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <MFRC522_ToCard+0x148>
 8000ace:	7d3b      	ldrb	r3, [r7, #20]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	7c7b      	ldrb	r3, [r7, #17]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	801a      	strh	r2, [r3, #0]
 8000ae4:	e005      	b.n	8000af2 <MFRC522_ToCard+0x154>
 8000ae6:	7d3b      	ldrb	r3, [r7, #20]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <MFRC522_ToCard+0x15e>
 8000af8:	2301      	movs	r3, #1
 8000afa:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000afc:	7d3b      	ldrb	r3, [r7, #20]
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d901      	bls.n	8000b06 <MFRC522_ToCard+0x168>
 8000b02:	2310      	movs	r3, #16
 8000b04:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000b06:	2300      	movs	r3, #0
 8000b08:	827b      	strh	r3, [r7, #18]
 8000b0a:	e00a      	b.n	8000b22 <MFRC522_ToCard+0x184>
 8000b0c:	8a7b      	ldrh	r3, [r7, #18]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	18d4      	adds	r4, r2, r3
 8000b12:	2009      	movs	r0, #9
 8000b14:	f7ff fecc 	bl	80008b0 <MFRC522_ReadRegister>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	7023      	strb	r3, [r4, #0]
 8000b1c:	8a7b      	ldrh	r3, [r7, #18]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	827b      	strh	r3, [r7, #18]
 8000b22:	7d3b      	ldrb	r3, [r7, #20]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	8a7a      	ldrh	r2, [r7, #18]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3ef      	bcc.n	8000b0c <MFRC522_ToCard+0x16e>
 8000b2c:	e001      	b.n	8000b32 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd90      	pop	{r4, r7, pc}

08000b3c <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	200d      	movs	r0, #13
 8000b4c:	f7ff fe98 	bl	8000880 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2293      	movs	r2, #147	; 0x93
 8000b54:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000b5e:	f107 030a 	add.w	r3, r7, #10
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2202      	movs	r2, #2
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f7ff ff17 	bl	800099e <MFRC522_ToCard>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d118      	bne.n	8000bac <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
 8000b7e:	e009      	b.n	8000b94 <MFRC522_Anticoll+0x58>
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	3301      	adds	r3, #1
 8000b92:	73bb      	strb	r3, [r7, #14]
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d9f2      	bls.n	8000b80 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	7b7a      	ldrb	r2, [r7, #13]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d001      	beq.n	8000bac <MFRC522_Anticoll+0x70>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000bba:	f000 f820 	bl	8000bfe <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000bbe:	218d      	movs	r1, #141	; 0x8d
 8000bc0:	202a      	movs	r0, #42	; 0x2a
 8000bc2:	f7ff fe5d 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000bc6:	213e      	movs	r1, #62	; 0x3e
 8000bc8:	202b      	movs	r0, #43	; 0x2b
 8000bca:	f7ff fe59 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000bce:	211e      	movs	r1, #30
 8000bd0:	202d      	movs	r0, #45	; 0x2d
 8000bd2:	f7ff fe55 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	202c      	movs	r0, #44	; 0x2c
 8000bda:	f7ff fe51 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8000bde:	2170      	movs	r1, #112	; 0x70
 8000be0:	2026      	movs	r0, #38	; 0x26
 8000be2:	f7ff fe4d 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	2015      	movs	r0, #21
 8000bea:	f7ff fe49 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000bee:	213d      	movs	r1, #61	; 0x3d
 8000bf0:	2011      	movs	r0, #17
 8000bf2:	f7ff fe45 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8000bf6:	f000 f80a 	bl	8000c0e <MFRC522_AntennaOn>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000c02:	210f      	movs	r1, #15
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fe3b 	bl	8000880 <MFRC522_WriteRegister>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f7ff fe4b 	bl	80008b0 <MFRC522_ReadRegister>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <MFRC522_AntennaOn+0x22>
 8000c28:	2103      	movs	r1, #3
 8000c2a:	2014      	movs	r0, #20
 8000c2c:	f7ff fe5a 	bl	80008e4 <MFRC522_SetBitMask>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x60>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_MspInit+0x60>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d131      	bne.n	8000d20 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_SPI_MspInit+0x90>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = RC522_CS_Pin|SCK_Pin|MOSI_Pin;
 8000cec:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <HAL_SPI_MspInit+0x94>)
 8000d02:	f000 fadb 	bl	80012bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8000d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_SPI_MspInit+0x94>)
 8000d1c:	f000 face 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40003800 	.word	0x40003800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d131      	bne.n	8000db8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <HAL_UART_MspInit+0x94>)
 8000d9a:	f000 fa8f 	bl	80012bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0x94>)
 8000db4:	f000 fa82 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f913 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e00a      	b.n	8000e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2c:	f3af 8000 	nop.w
 8000e30:	4601      	mov	r1, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbf0      	blt.n	8000e2c <_read+0x12>
  }

  return len;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e009      	b.n	8000e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	60ba      	str	r2, [r7, #8]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc98 	bl	80007a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf1      	blt.n	8000e66 <_write+0x12>
  }
  return len;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_close>:

int _close(int file)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <_isatty>:

int _isatty(int file)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f001 fd50 	bl	80029c0 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20005000 	.word	0x20005000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	200001b8 	.word	0x200001b8
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f64:	f7ff fff8 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6a:	490c      	ldr	r1, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f80:	4c09      	ldr	r4, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f001 fd1d 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff f937 	bl	8000204 <main>
  bx lr
 8000f96:	4770      	bx	lr
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000fa0:	08003b3c 	.word	0x08003b3c
  ldr r2, =_sbss
 8000fa4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000fa8:	200001d0 	.word	0x200001d0

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe34 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f935 	bl	800126a <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000005c 	.word	0x2000005c
 8001034:	20000064 	.word	0x20000064
 8001038:	20000060 	.word	0x20000060

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_IncTick+0x20>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000064 	.word	0x20000064
 800105c:	200001bc 	.word	0x200001bc

08001060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <HAL_GetTick+0x10>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200001bc 	.word	0x200001bc

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff fff0 	bl	8001060 <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffe0 	bl	8001060 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000064 	.word	0x20000064

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff90 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff49 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff5e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffb0 	bl	80011d8 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d106      	bne.n	80012a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800129e:	e005      	b.n	80012ac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b08b      	sub	sp, #44	; 0x2c
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e169      	b.n	80015a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012d0:	2201      	movs	r2, #1
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 8158 	bne.w	800159e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a9a      	ldr	r2, [pc, #616]	; (800155c <HAL_GPIO_Init+0x2a0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d05e      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
 80012f8:	4a98      	ldr	r2, [pc, #608]	; (800155c <HAL_GPIO_Init+0x2a0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d875      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 80012fe:	4a98      	ldr	r2, [pc, #608]	; (8001560 <HAL_GPIO_Init+0x2a4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d058      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
 8001304:	4a96      	ldr	r2, [pc, #600]	; (8001560 <HAL_GPIO_Init+0x2a4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d86f      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 800130a:	4a96      	ldr	r2, [pc, #600]	; (8001564 <HAL_GPIO_Init+0x2a8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d052      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
 8001310:	4a94      	ldr	r2, [pc, #592]	; (8001564 <HAL_GPIO_Init+0x2a8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d869      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 8001316:	4a94      	ldr	r2, [pc, #592]	; (8001568 <HAL_GPIO_Init+0x2ac>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d04c      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
 800131c:	4a92      	ldr	r2, [pc, #584]	; (8001568 <HAL_GPIO_Init+0x2ac>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d863      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 8001322:	4a92      	ldr	r2, [pc, #584]	; (800156c <HAL_GPIO_Init+0x2b0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d046      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
 8001328:	4a90      	ldr	r2, [pc, #576]	; (800156c <HAL_GPIO_Init+0x2b0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d85d      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 800132e:	2b12      	cmp	r3, #18
 8001330:	d82a      	bhi.n	8001388 <HAL_GPIO_Init+0xcc>
 8001332:	2b12      	cmp	r3, #18
 8001334:	d859      	bhi.n	80013ea <HAL_GPIO_Init+0x12e>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <HAL_GPIO_Init+0x80>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	080013b7 	.word	0x080013b7
 8001340:	08001391 	.word	0x08001391
 8001344:	080013a3 	.word	0x080013a3
 8001348:	080013e5 	.word	0x080013e5
 800134c:	080013eb 	.word	0x080013eb
 8001350:	080013eb 	.word	0x080013eb
 8001354:	080013eb 	.word	0x080013eb
 8001358:	080013eb 	.word	0x080013eb
 800135c:	080013eb 	.word	0x080013eb
 8001360:	080013eb 	.word	0x080013eb
 8001364:	080013eb 	.word	0x080013eb
 8001368:	080013eb 	.word	0x080013eb
 800136c:	080013eb 	.word	0x080013eb
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013eb 	.word	0x080013eb
 8001378:	080013eb 	.word	0x080013eb
 800137c:	080013eb 	.word	0x080013eb
 8001380:	08001399 	.word	0x08001399
 8001384:	080013ad 	.word	0x080013ad
 8001388:	4a79      	ldr	r2, [pc, #484]	; (8001570 <HAL_GPIO_Init+0x2b4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800138e:	e02c      	b.n	80013ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e029      	b.n	80013ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	3304      	adds	r3, #4
 800139e:	623b      	str	r3, [r7, #32]
          break;
 80013a0:	e024      	b.n	80013ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	3308      	adds	r3, #8
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e01f      	b.n	80013ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	330c      	adds	r3, #12
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e01a      	b.n	80013ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013be:	2304      	movs	r3, #4
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e013      	b.n	80013ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013cc:	2308      	movs	r3, #8
 80013ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	611a      	str	r2, [r3, #16]
          break;
 80013d6:	e009      	b.n	80013ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	615a      	str	r2, [r3, #20]
          break;
 80013e2:	e003      	b.n	80013ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
          break;
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x130>
          break;
 80013ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d801      	bhi.n	80013f6 <HAL_GPIO_Init+0x13a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	e001      	b.n	80013fa <HAL_GPIO_Init+0x13e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d802      	bhi.n	8001408 <HAL_GPIO_Init+0x14c>
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x152>
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	3b08      	subs	r3, #8
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	210f      	movs	r1, #15
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	6a39      	ldr	r1, [r7, #32]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80b1 	beq.w	800159e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x2b8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x2b8>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x2b8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2bc>)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <HAL_GPIO_Init+0x2c0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d013      	beq.n	80014a8 <HAL_GPIO_Init+0x1ec>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d00d      	beq.n	80014a4 <HAL_GPIO_Init+0x1e8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a3e      	ldr	r2, [pc, #248]	; (8001584 <HAL_GPIO_Init+0x2c8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d007      	beq.n	80014a0 <HAL_GPIO_Init+0x1e4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_GPIO_Init+0x2cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_GPIO_Init+0x1e0>
 8001498:	2303      	movs	r3, #3
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x1ee>
 800149c:	2304      	movs	r3, #4
 800149e:	e004      	b.n	80014aa <HAL_GPIO_Init+0x1ee>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e002      	b.n	80014aa <HAL_GPIO_Init+0x1ee>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_GPIO_Init+0x1ee>
 80014a8:	2300      	movs	r3, #0
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	f002 0203 	and.w	r2, r2, #3
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	4093      	lsls	r3, r2
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ba:	492f      	ldr	r1, [pc, #188]	; (8001578 <HAL_GPIO_Init+0x2bc>)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_GPIO_Init+0x2d0>)
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	492c      	ldr	r1, [pc, #176]	; (800158c <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_GPIO_Init+0x2d0>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4928      	ldr	r1, [pc, #160]	; (800158c <HAL_GPIO_Init+0x2d0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_GPIO_Init+0x2d0>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4922      	ldr	r1, [pc, #136]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_GPIO_Init+0x2d0>)
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	491e      	ldr	r1, [pc, #120]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001514:	4013      	ands	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4918      	ldr	r1, [pc, #96]	; (800158c <HAL_GPIO_Init+0x2d0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4914      	ldr	r1, [pc, #80]	; (800158c <HAL_GPIO_Init+0x2d0>)
 800153c:	4013      	ands	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d021      	beq.n	8001590 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_GPIO_Init+0x2d0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e021      	b.n	800159e <HAL_GPIO_Init+0x2e2>
 800155a:	bf00      	nop
 800155c:	10320000 	.word	0x10320000
 8001560:	10310000 	.word	0x10310000
 8001564:	10220000 	.word	0x10220000
 8001568:	10210000 	.word	0x10210000
 800156c:	10120000 	.word	0x10120000
 8001570:	10110000 	.word	0x10110000
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	40010800 	.word	0x40010800
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40011000 	.word	0x40011000
 8001588:	40011400 	.word	0x40011400
 800158c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_GPIO_Init+0x304>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	43db      	mvns	r3, r3
 8001598:	4909      	ldr	r1, [pc, #36]	; (80015c0 <HAL_GPIO_Init+0x304>)
 800159a:	4013      	ands	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	3301      	adds	r3, #1
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f47f ae8e 	bne.w	80012d0 <HAL_GPIO_Init+0x14>
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	372c      	adds	r7, #44	; 0x2c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	807b      	strh	r3, [r7, #2]
 80015fe:	4613      	mov	r3, r2
 8001600:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001602:	787b      	ldrb	r3, [r7, #1]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800160e:	e003      	b.n	8001618 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	041a      	lsls	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	611a      	str	r2, [r3, #16]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
	...

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e272      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4b8f      	ldr	r3, [pc, #572]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b89      	ldr	r3, [pc, #548]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06c      	beq.n	8001750 <HAL_RCC_OscConfig+0x12c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d168      	bne.n	8001750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e24c      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x76>
 800168c:	4b80      	ldr	r3, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7f      	ldr	r2, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a2:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7a      	ldr	r2, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b78      	ldr	r3, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a77      	ldr	r2, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e01d      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0xbc>
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a71      	ldr	r2, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b6f      	ldr	r3, [pc, #444]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6e      	ldr	r2, [pc, #440]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016e0:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6a      	ldr	r2, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b68      	ldr	r3, [pc, #416]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a67      	ldr	r2, [pc, #412]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fcae 	bl	8001060 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcaa 	bl	8001060 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e200      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xe4>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fc9a 	bl	8001060 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fc96 	bl	8001060 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1ec      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x10c>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d063      	beq.n	8001826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1c0      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4939      	ldr	r1, [pc, #228]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_RCC_OscConfig+0x270>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fc4f 	bl	8001060 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc4b 	bl	8001060 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1a1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4927      	ldr	r1, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x270>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc2e 	bl	8001060 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fc2a 	bl	8001060 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e180      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03a      	beq.n	80018a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x274>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff fc0e 	bl	8001060 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff fc0a 	bl	8001060 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e160      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 face 	bl	8001e08 <RCC_Delay>
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x274>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fbf4 	bl	8001060 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	e00f      	b.n	800189c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fbf0 	bl	8001060 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d908      	bls.n	800189c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e146      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	42420000 	.word	0x42420000
 8001898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e9      	bne.n	800187c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a6 	beq.w	8001a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7e      	ldr	r2, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fbb1 	bl	8001060 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff fbad 	bl	8001060 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	; 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e103      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x312>
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e02d      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x334>
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e01c      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d10c      	bne.n	800197a <HAL_RCC_OscConfig+0x356>
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d015      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb61 	bl	8001060 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fb5d 	bl	8001060 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0b1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <HAL_RCC_OscConfig+0x37e>
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fb4b 	bl	8001060 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fb47 	bl	8001060 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e09b      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ee      	bne.n	80019ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8087 	beq.w	8001b1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d061      	beq.n	8001adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d146      	bne.n	8001aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fb1b 	bl	8001060 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff fb17 	bl	8001060 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e06d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d108      	bne.n	8001a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a19      	ldr	r1, [r3, #32]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff faeb 	bl	8001060 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fae7 	bl	8001060 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e03d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46a>
 8001aac:	e035      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fad4 	bl	8001060 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fad0 	bl	8001060 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e026      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x498>
 8001ada:	e01e      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e019      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x500>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4965      	ldr	r1, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e073      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4936      	ldr	r1, [pc, #216]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fa22 	bl	8001060 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff fa1e 	bl	8001060 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e053      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f980 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08003a70 	.word	0x08003a70
 8001cf4:	2000005c 	.word	0x2000005c
 8001cf8:	20000060 	.word	0x20000060

08001cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x30>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x36>
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2e:	613b      	str	r3, [r7, #16]
      break;
 8001d30:	e027      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0c5b      	lsrs	r3, r3, #17
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	613b      	str	r3, [r7, #16]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	613b      	str	r3, [r7, #16]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	693b      	ldr	r3, [r7, #16]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	007a1200 	.word	0x007a1200
 8001d98:	08003a88 	.word	0x08003a88
 8001d9c:	08003a98 	.word	0x08003a98
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	2000005c 	.word	0x2000005c

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	f7ff fff2 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08003a80 	.word	0x08003a80

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08003a80 	.word	0x08003a80

08001e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <RCC_Delay+0x34>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <RCC_Delay+0x38>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e24:	bf00      	nop
  }
  while (Delay --);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <RCC_Delay+0x1c>
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	2000005c 	.word	0x2000005c
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d07d      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10d      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	61d3      	str	r3, [r2, #28]
 8001e7c:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d118      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f8dc 	bl	8001060 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	e008      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7ff f8d8 	bl	8001060 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e06d      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d02e      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d027      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d014      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f8a7 	bl	8001060 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f8a3 	bl	8001060 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e036      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4917      	ldr	r1, [pc, #92]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	42420440 	.word	0x42420440

08001fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e076      	b.n	80020b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd2:	d009      	beq.n	8001fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
 8001fda:	e005      	b.n	8001fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fe4a 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	0c1a      	lsrs	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f002 0204 	and.w	r2, r2, #4
 800208e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_SPI_TransmitReceive+0x26>
 80020da:	2302      	movs	r3, #2
 80020dc:	e198      	b.n	8002410 <HAL_SPI_TransmitReceive+0x358>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e6:	f7fe ffbb 	bl	8001060 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002104:	2b01      	cmp	r3, #1
 8002106:	d00f      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x70>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210e:	d107      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d103      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x68>
 8002118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800211c:	2b04      	cmp	r3, #4
 800211e:	d003      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002126:	e16d      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_SPI_TransmitReceive+0x82>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_TransmitReceive+0x82>
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002140:	e160      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b04      	cmp	r3, #4
 800214c:	d003      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2205      	movs	r2, #5
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	887a      	ldrh	r2, [r7, #2]
 800217e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d007      	beq.n	80021aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b2:	d17c      	bne.n	80022ae <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_TransmitReceive+0x10a>
 80021bc:	8b7b      	ldrh	r3, [r7, #26]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d16a      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	1c9a      	adds	r2, r3, #2
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e6:	e057      	b.n	8002298 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d11b      	bne.n	800222e <HAL_SPI_TransmitReceive+0x176>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_SPI_TransmitReceive+0x176>
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d113      	bne.n	800222e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	1c9a      	adds	r2, r3, #2
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d119      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x1b8>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d014      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	b292      	uxth	r2, r2
 8002252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	1c9a      	adds	r2, r3, #2
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002270:	f7fe fef6 	bl	8001060 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800227c:	429a      	cmp	r2, r3
 800227e:	d80b      	bhi.n	8002298 <HAL_SPI_TransmitReceive+0x1e0>
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d007      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002296:	e0b5      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1a2      	bne.n	80021e8 <HAL_SPI_TransmitReceive+0x130>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d19d      	bne.n	80021e8 <HAL_SPI_TransmitReceive+0x130>
 80022ac:	e080      	b.n	80023b0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_TransmitReceive+0x204>
 80022b6:	8b7b      	ldrh	r3, [r7, #26]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d16f      	bne.n	800239c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e2:	e05b      	b.n	800239c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d11c      	bne.n	800232c <HAL_SPI_TransmitReceive+0x274>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <HAL_SPI_TransmitReceive+0x274>
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d114      	bne.n	800232c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d119      	bne.n	800236e <HAL_SPI_TransmitReceive+0x2b6>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d014      	beq.n	800236e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800236a:	2301      	movs	r3, #1
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800236e:	f7fe fe77 	bl	8001060 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237a:	429a      	cmp	r2, r3
 800237c:	d803      	bhi.n	8002386 <HAL_SPI_TransmitReceive+0x2ce>
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d102      	bne.n	800238c <HAL_SPI_TransmitReceive+0x2d4>
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800239a:	e033      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d19e      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x22c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d199      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8b7 	bl	8002528 <SPI_EndRxTxTransaction>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023cc:	e01a      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023fa:	e003      	b.n	8002404 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800240c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002428:	f7fe fe1a 	bl	8001060 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002438:	f7fe fe12 	bl	8001060 <HAL_GetTick>
 800243c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	0d1b      	lsrs	r3, r3, #20
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800244e:	e054      	b.n	80024fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d050      	beq.n	80024fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002458:	f7fe fe02 	bl	8001060 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	d902      	bls.n	800246e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d13d      	bne.n	80024ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800247c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002486:	d111      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002490:	d004      	beq.n	800249c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	d107      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b4:	d10f      	bne.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e017      	b.n	800251a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d19b      	bne.n	8002450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000005c 	.word	0x2000005c

08002528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7ff ff6a 	bl	8002418 <SPI_WaitFlagStateUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e000      	b.n	800255c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e042      	b.n	80025fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fbd2 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f97b 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b20      	cmp	r3, #32
 8002622:	d16d      	bne.n	8002700 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Transmit+0x2c>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e066      	b.n	8002702 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe fd0d 	bl	8001060 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d108      	bne.n	8002670 <HAL_UART_Transmit+0x6c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e003      	b.n	8002678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002678:	e02a      	b.n	80026d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f865 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e036      	b.n	8002702 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3302      	adds	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e007      	b.n	80026c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1cf      	bne.n	800267a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f835 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e006      	b.n	8002702 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	4613      	mov	r3, r2
 8002716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	d112      	bne.n	800274a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Receive_IT+0x26>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e00b      	b.n	800274c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	461a      	mov	r2, r3
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f875 	bl	8002830 <UART_Start_Receive_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	e000      	b.n	800274c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	; 0x40
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	e050      	b.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d04c      	beq.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
 8002774:	f7fe fc74 	bl	8001060 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002780:	429a      	cmp	r2, r3
 8002782:	d241      	bcs.n	8002808 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a4:	637a      	str	r2, [r7, #52]	; 0x34
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e5      	bne.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	613b      	str	r3, [r7, #16]
   return(result);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3314      	adds	r3, #20
 80027d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d8:	623a      	str	r2, [r7, #32]
 80027da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	69f9      	ldr	r1, [r7, #28]
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e5      	bne.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e00f      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	429a      	cmp	r2, r3
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	429a      	cmp	r2, r3
 8002824:	d09f      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3740      	adds	r7, #64	; 0x40
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2222      	movs	r2, #34	; 0x22
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002874:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028de:	f023 030c 	bic.w	r3, r3, #12
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <UART_SetConfig+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff fa68 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	e002      	b.n	800291a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002914:	f7ff fa50 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	0119      	lsls	r1, r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <UART_SetConfig+0x118>)
 8002952:	fba3 0302 	umull	r0, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <UART_SetConfig+0x118>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	4419      	add	r1, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <UART_SetConfig+0x118>)
 800298a:	fba3 0302 	umull	r0, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <UART_SetConfig+0x118>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	440a      	add	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013800 	.word	0x40013800
 80029bc:	51eb851f 	.word	0x51eb851f

080029c0 <__errno>:
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <__errno+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000068 	.word	0x20000068

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2600      	movs	r6, #0
 80029d0:	4d0c      	ldr	r5, [pc, #48]	; (8002a04 <__libc_init_array+0x38>)
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d4:	1b64      	subs	r4, r4, r5
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	42a6      	cmp	r6, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	f001 f82c 	bl	8003a38 <_init>
 80029e0:	2600      	movs	r6, #0
 80029e2:	4d0a      	ldr	r5, [pc, #40]	; (8002a0c <__libc_init_array+0x40>)
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <__libc_init_array+0x44>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	42a6      	cmp	r6, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f4:	4798      	blx	r3
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fe:	4798      	blx	r3
 8002a00:	3601      	adds	r6, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	08003b34 	.word	0x08003b34
 8002a08:	08003b34 	.word	0x08003b34
 8002a0c:	08003b34 	.word	0x08003b34
 8002a10:	08003b38 	.word	0x08003b38

08002a14 <memset>:
 8002a14:	4603      	mov	r3, r0
 8002a16:	4402      	add	r2, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <iprintf>:
 8002a24:	b40f      	push	{r0, r1, r2, r3}
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <iprintf+0x2c>)
 8002a28:	b513      	push	{r0, r1, r4, lr}
 8002a2a:	681c      	ldr	r4, [r3, #0]
 8002a2c:	b124      	cbz	r4, 8002a38 <iprintf+0x14>
 8002a2e:	69a3      	ldr	r3, [r4, #24]
 8002a30:	b913      	cbnz	r3, 8002a38 <iprintf+0x14>
 8002a32:	4620      	mov	r0, r4
 8002a34:	f000 fa5a 	bl	8002eec <__sinit>
 8002a38:	ab05      	add	r3, sp, #20
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	9a04      	ldr	r2, [sp, #16]
 8002a3e:	68a1      	ldr	r1, [r4, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f000 fc5d 	bl	8003300 <_vfiprintf_r>
 8002a46:	b002      	add	sp, #8
 8002a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a4c:	b004      	add	sp, #16
 8002a4e:	4770      	bx	lr
 8002a50:	20000068 	.word	0x20000068

08002a54 <_puts_r>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	460e      	mov	r6, r1
 8002a58:	4605      	mov	r5, r0
 8002a5a:	b118      	cbz	r0, 8002a64 <_puts_r+0x10>
 8002a5c:	6983      	ldr	r3, [r0, #24]
 8002a5e:	b90b      	cbnz	r3, 8002a64 <_puts_r+0x10>
 8002a60:	f000 fa44 	bl	8002eec <__sinit>
 8002a64:	69ab      	ldr	r3, [r5, #24]
 8002a66:	68ac      	ldr	r4, [r5, #8]
 8002a68:	b913      	cbnz	r3, 8002a70 <_puts_r+0x1c>
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f000 fa3e 	bl	8002eec <__sinit>
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <_puts_r+0xd0>)
 8002a72:	429c      	cmp	r4, r3
 8002a74:	d120      	bne.n	8002ab8 <_puts_r+0x64>
 8002a76:	686c      	ldr	r4, [r5, #4]
 8002a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d405      	bmi.n	8002a8a <_puts_r+0x36>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	0598      	lsls	r0, r3, #22
 8002a82:	d402      	bmi.n	8002a8a <_puts_r+0x36>
 8002a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a86:	f000 facf 	bl	8003028 <__retarget_lock_acquire_recursive>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	0719      	lsls	r1, r3, #28
 8002a8e:	d51d      	bpl.n	8002acc <_puts_r+0x78>
 8002a90:	6923      	ldr	r3, [r4, #16]
 8002a92:	b1db      	cbz	r3, 8002acc <_puts_r+0x78>
 8002a94:	3e01      	subs	r6, #1
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60a3      	str	r3, [r4, #8]
 8002aa0:	bb39      	cbnz	r1, 8002af2 <_puts_r+0x9e>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da38      	bge.n	8002b18 <_puts_r+0xc4>
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	210a      	movs	r1, #10
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f000 f848 	bl	8002b40 <__swbuf_r>
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d011      	beq.n	8002ad8 <_puts_r+0x84>
 8002ab4:	250a      	movs	r5, #10
 8002ab6:	e011      	b.n	8002adc <_puts_r+0x88>
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <_puts_r+0xd4>)
 8002aba:	429c      	cmp	r4, r3
 8002abc:	d101      	bne.n	8002ac2 <_puts_r+0x6e>
 8002abe:	68ac      	ldr	r4, [r5, #8]
 8002ac0:	e7da      	b.n	8002a78 <_puts_r+0x24>
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <_puts_r+0xd8>)
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	bf08      	it	eq
 8002ac8:	68ec      	ldreq	r4, [r5, #12]
 8002aca:	e7d5      	b.n	8002a78 <_puts_r+0x24>
 8002acc:	4621      	mov	r1, r4
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f000 f888 	bl	8002be4 <__swsetup_r>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d0dd      	beq.n	8002a94 <_puts_r+0x40>
 8002ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8002adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d405      	bmi.n	8002aee <_puts_r+0x9a>
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	059b      	lsls	r3, r3, #22
 8002ae6:	d402      	bmi.n	8002aee <_puts_r+0x9a>
 8002ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aea:	f000 fa9e 	bl	800302a <__retarget_lock_release_recursive>
 8002aee:	4628      	mov	r0, r5
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da04      	bge.n	8002b00 <_puts_r+0xac>
 8002af6:	69a2      	ldr	r2, [r4, #24]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dc06      	bgt.n	8002b0a <_puts_r+0xb6>
 8002afc:	290a      	cmp	r1, #10
 8002afe:	d004      	beq.n	8002b0a <_puts_r+0xb6>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	6022      	str	r2, [r4, #0]
 8002b06:	7019      	strb	r1, [r3, #0]
 8002b08:	e7c5      	b.n	8002a96 <_puts_r+0x42>
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 f817 	bl	8002b40 <__swbuf_r>
 8002b12:	3001      	adds	r0, #1
 8002b14:	d1bf      	bne.n	8002a96 <_puts_r+0x42>
 8002b16:	e7df      	b.n	8002ad8 <_puts_r+0x84>
 8002b18:	250a      	movs	r5, #10
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	6022      	str	r2, [r4, #0]
 8002b20:	701d      	strb	r5, [r3, #0]
 8002b22:	e7db      	b.n	8002adc <_puts_r+0x88>
 8002b24:	08003ac0 	.word	0x08003ac0
 8002b28:	08003ae0 	.word	0x08003ae0
 8002b2c:	08003aa0 	.word	0x08003aa0

08002b30 <puts>:
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <puts+0xc>)
 8002b32:	4601      	mov	r1, r0
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	f7ff bf8d 	b.w	8002a54 <_puts_r>
 8002b3a:	bf00      	nop
 8002b3c:	20000068 	.word	0x20000068

08002b40 <__swbuf_r>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	460e      	mov	r6, r1
 8002b44:	4614      	mov	r4, r2
 8002b46:	4605      	mov	r5, r0
 8002b48:	b118      	cbz	r0, 8002b52 <__swbuf_r+0x12>
 8002b4a:	6983      	ldr	r3, [r0, #24]
 8002b4c:	b90b      	cbnz	r3, 8002b52 <__swbuf_r+0x12>
 8002b4e:	f000 f9cd 	bl	8002eec <__sinit>
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <__swbuf_r+0x98>)
 8002b54:	429c      	cmp	r4, r3
 8002b56:	d12b      	bne.n	8002bb0 <__swbuf_r+0x70>
 8002b58:	686c      	ldr	r4, [r5, #4]
 8002b5a:	69a3      	ldr	r3, [r4, #24]
 8002b5c:	60a3      	str	r3, [r4, #8]
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	071a      	lsls	r2, r3, #28
 8002b62:	d52f      	bpl.n	8002bc4 <__swbuf_r+0x84>
 8002b64:	6923      	ldr	r3, [r4, #16]
 8002b66:	b36b      	cbz	r3, 8002bc4 <__swbuf_r+0x84>
 8002b68:	6923      	ldr	r3, [r4, #16]
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	b2f6      	uxtb	r6, r6
 8002b6e:	1ac0      	subs	r0, r0, r3
 8002b70:	6963      	ldr	r3, [r4, #20]
 8002b72:	4637      	mov	r7, r6
 8002b74:	4283      	cmp	r3, r0
 8002b76:	dc04      	bgt.n	8002b82 <__swbuf_r+0x42>
 8002b78:	4621      	mov	r1, r4
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f000 f922 	bl	8002dc4 <_fflush_r>
 8002b80:	bb30      	cbnz	r0, 8002bd0 <__swbuf_r+0x90>
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	3001      	adds	r0, #1
 8002b86:	3b01      	subs	r3, #1
 8002b88:	60a3      	str	r3, [r4, #8]
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	6022      	str	r2, [r4, #0]
 8002b90:	701e      	strb	r6, [r3, #0]
 8002b92:	6963      	ldr	r3, [r4, #20]
 8002b94:	4283      	cmp	r3, r0
 8002b96:	d004      	beq.n	8002ba2 <__swbuf_r+0x62>
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	07db      	lsls	r3, r3, #31
 8002b9c:	d506      	bpl.n	8002bac <__swbuf_r+0x6c>
 8002b9e:	2e0a      	cmp	r6, #10
 8002ba0:	d104      	bne.n	8002bac <__swbuf_r+0x6c>
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f000 f90d 	bl	8002dc4 <_fflush_r>
 8002baa:	b988      	cbnz	r0, 8002bd0 <__swbuf_r+0x90>
 8002bac:	4638      	mov	r0, r7
 8002bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <__swbuf_r+0x9c>)
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d101      	bne.n	8002bba <__swbuf_r+0x7a>
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	e7cf      	b.n	8002b5a <__swbuf_r+0x1a>
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <__swbuf_r+0xa0>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	bf08      	it	eq
 8002bc0:	68ec      	ldreq	r4, [r5, #12]
 8002bc2:	e7ca      	b.n	8002b5a <__swbuf_r+0x1a>
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f000 f80c 	bl	8002be4 <__swsetup_r>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d0cb      	beq.n	8002b68 <__swbuf_r+0x28>
 8002bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8002bd4:	e7ea      	b.n	8002bac <__swbuf_r+0x6c>
 8002bd6:	bf00      	nop
 8002bd8:	08003ac0 	.word	0x08003ac0
 8002bdc:	08003ae0 	.word	0x08003ae0
 8002be0:	08003aa0 	.word	0x08003aa0

08002be4 <__swsetup_r>:
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <__swsetup_r+0xcc>)
 8002be6:	b570      	push	{r4, r5, r6, lr}
 8002be8:	681d      	ldr	r5, [r3, #0]
 8002bea:	4606      	mov	r6, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	b125      	cbz	r5, 8002bfa <__swsetup_r+0x16>
 8002bf0:	69ab      	ldr	r3, [r5, #24]
 8002bf2:	b913      	cbnz	r3, 8002bfa <__swsetup_r+0x16>
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f979 	bl	8002eec <__sinit>
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <__swsetup_r+0xd0>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	d10f      	bne.n	8002c20 <__swsetup_r+0x3c>
 8002c00:	686c      	ldr	r4, [r5, #4]
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c08:	0719      	lsls	r1, r3, #28
 8002c0a:	d42c      	bmi.n	8002c66 <__swsetup_r+0x82>
 8002c0c:	06dd      	lsls	r5, r3, #27
 8002c0e:	d411      	bmi.n	8002c34 <__swsetup_r+0x50>
 8002c10:	2309      	movs	r3, #9
 8002c12:	6033      	str	r3, [r6, #0]
 8002c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e03e      	b.n	8002c9e <__swsetup_r+0xba>
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <__swsetup_r+0xd4>)
 8002c22:	429c      	cmp	r4, r3
 8002c24:	d101      	bne.n	8002c2a <__swsetup_r+0x46>
 8002c26:	68ac      	ldr	r4, [r5, #8]
 8002c28:	e7eb      	b.n	8002c02 <__swsetup_r+0x1e>
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <__swsetup_r+0xd8>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	bf08      	it	eq
 8002c30:	68ec      	ldreq	r4, [r5, #12]
 8002c32:	e7e6      	b.n	8002c02 <__swsetup_r+0x1e>
 8002c34:	0758      	lsls	r0, r3, #29
 8002c36:	d512      	bpl.n	8002c5e <__swsetup_r+0x7a>
 8002c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3a:	b141      	cbz	r1, 8002c4e <__swsetup_r+0x6a>
 8002c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d002      	beq.n	8002c4a <__swsetup_r+0x66>
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 fa57 	bl	80030f8 <_free_r>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	2300      	movs	r3, #0
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	89a3      	ldrh	r3, [r4, #12]
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	81a3      	strh	r3, [r4, #12]
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	b94b      	cbnz	r3, 8002c7e <__swsetup_r+0x9a>
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c74:	d003      	beq.n	8002c7e <__swsetup_r+0x9a>
 8002c76:	4621      	mov	r1, r4
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f000 f9fd 	bl	8003078 <__smakebuf_r>
 8002c7e:	89a0      	ldrh	r0, [r4, #12]
 8002c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c84:	f010 0301 	ands.w	r3, r0, #1
 8002c88:	d00a      	beq.n	8002ca0 <__swsetup_r+0xbc>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60a3      	str	r3, [r4, #8]
 8002c8e:	6963      	ldr	r3, [r4, #20]
 8002c90:	425b      	negs	r3, r3
 8002c92:	61a3      	str	r3, [r4, #24]
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	b943      	cbnz	r3, 8002caa <__swsetup_r+0xc6>
 8002c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c9c:	d1ba      	bne.n	8002c14 <__swsetup_r+0x30>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	0781      	lsls	r1, r0, #30
 8002ca2:	bf58      	it	pl
 8002ca4:	6963      	ldrpl	r3, [r4, #20]
 8002ca6:	60a3      	str	r3, [r4, #8]
 8002ca8:	e7f4      	b.n	8002c94 <__swsetup_r+0xb0>
 8002caa:	2000      	movs	r0, #0
 8002cac:	e7f7      	b.n	8002c9e <__swsetup_r+0xba>
 8002cae:	bf00      	nop
 8002cb0:	20000068 	.word	0x20000068
 8002cb4:	08003ac0 	.word	0x08003ac0
 8002cb8:	08003ae0 	.word	0x08003ae0
 8002cbc:	08003aa0 	.word	0x08003aa0

08002cc0 <__sflush_r>:
 8002cc0:	898a      	ldrh	r2, [r1, #12]
 8002cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	0710      	lsls	r0, r2, #28
 8002cc8:	460c      	mov	r4, r1
 8002cca:	d457      	bmi.n	8002d7c <__sflush_r+0xbc>
 8002ccc:	684b      	ldr	r3, [r1, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	dc04      	bgt.n	8002cdc <__sflush_r+0x1c>
 8002cd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dc01      	bgt.n	8002cdc <__sflush_r+0x1c>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cde:	2e00      	cmp	r6, #0
 8002ce0:	d0fa      	beq.n	8002cd8 <__sflush_r+0x18>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ce8:	682f      	ldr	r7, [r5, #0]
 8002cea:	602b      	str	r3, [r5, #0]
 8002cec:	d032      	beq.n	8002d54 <__sflush_r+0x94>
 8002cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	075a      	lsls	r2, r3, #29
 8002cf4:	d505      	bpl.n	8002d02 <__sflush_r+0x42>
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	1ac0      	subs	r0, r0, r3
 8002cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cfc:	b10b      	cbz	r3, 8002d02 <__sflush_r+0x42>
 8002cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d00:	1ac0      	subs	r0, r0, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	4602      	mov	r2, r0
 8002d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d08:	4628      	mov	r0, r5
 8002d0a:	6a21      	ldr	r1, [r4, #32]
 8002d0c:	47b0      	blx	r6
 8002d0e:	1c43      	adds	r3, r0, #1
 8002d10:	89a3      	ldrh	r3, [r4, #12]
 8002d12:	d106      	bne.n	8002d22 <__sflush_r+0x62>
 8002d14:	6829      	ldr	r1, [r5, #0]
 8002d16:	291d      	cmp	r1, #29
 8002d18:	d82c      	bhi.n	8002d74 <__sflush_r+0xb4>
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <__sflush_r+0x100>)
 8002d1c:	40ca      	lsrs	r2, r1
 8002d1e:	07d6      	lsls	r6, r2, #31
 8002d20:	d528      	bpl.n	8002d74 <__sflush_r+0xb4>
 8002d22:	2200      	movs	r2, #0
 8002d24:	6062      	str	r2, [r4, #4]
 8002d26:	6922      	ldr	r2, [r4, #16]
 8002d28:	04d9      	lsls	r1, r3, #19
 8002d2a:	6022      	str	r2, [r4, #0]
 8002d2c:	d504      	bpl.n	8002d38 <__sflush_r+0x78>
 8002d2e:	1c42      	adds	r2, r0, #1
 8002d30:	d101      	bne.n	8002d36 <__sflush_r+0x76>
 8002d32:	682b      	ldr	r3, [r5, #0]
 8002d34:	b903      	cbnz	r3, 8002d38 <__sflush_r+0x78>
 8002d36:	6560      	str	r0, [r4, #84]	; 0x54
 8002d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d3a:	602f      	str	r7, [r5, #0]
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d0cb      	beq.n	8002cd8 <__sflush_r+0x18>
 8002d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d44:	4299      	cmp	r1, r3
 8002d46:	d002      	beq.n	8002d4e <__sflush_r+0x8e>
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 f9d5 	bl	80030f8 <_free_r>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	6360      	str	r0, [r4, #52]	; 0x34
 8002d52:	e7c2      	b.n	8002cda <__sflush_r+0x1a>
 8002d54:	6a21      	ldr	r1, [r4, #32]
 8002d56:	2301      	movs	r3, #1
 8002d58:	4628      	mov	r0, r5
 8002d5a:	47b0      	blx	r6
 8002d5c:	1c41      	adds	r1, r0, #1
 8002d5e:	d1c7      	bne.n	8002cf0 <__sflush_r+0x30>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0c4      	beq.n	8002cf0 <__sflush_r+0x30>
 8002d66:	2b1d      	cmp	r3, #29
 8002d68:	d001      	beq.n	8002d6e <__sflush_r+0xae>
 8002d6a:	2b16      	cmp	r3, #22
 8002d6c:	d101      	bne.n	8002d72 <__sflush_r+0xb2>
 8002d6e:	602f      	str	r7, [r5, #0]
 8002d70:	e7b2      	b.n	8002cd8 <__sflush_r+0x18>
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	e7ae      	b.n	8002cda <__sflush_r+0x1a>
 8002d7c:	690f      	ldr	r7, [r1, #16]
 8002d7e:	2f00      	cmp	r7, #0
 8002d80:	d0aa      	beq.n	8002cd8 <__sflush_r+0x18>
 8002d82:	0793      	lsls	r3, r2, #30
 8002d84:	bf18      	it	ne
 8002d86:	2300      	movne	r3, #0
 8002d88:	680e      	ldr	r6, [r1, #0]
 8002d8a:	bf08      	it	eq
 8002d8c:	694b      	ldreq	r3, [r1, #20]
 8002d8e:	1bf6      	subs	r6, r6, r7
 8002d90:	600f      	str	r7, [r1, #0]
 8002d92:	608b      	str	r3, [r1, #8]
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	dd9f      	ble.n	8002cd8 <__sflush_r+0x18>
 8002d98:	4633      	mov	r3, r6
 8002d9a:	463a      	mov	r2, r7
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	6a21      	ldr	r1, [r4, #32]
 8002da0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002da4:	47e0      	blx	ip
 8002da6:	2800      	cmp	r0, #0
 8002da8:	dc06      	bgt.n	8002db8 <__sflush_r+0xf8>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	e790      	b.n	8002cda <__sflush_r+0x1a>
 8002db8:	4407      	add	r7, r0
 8002dba:	1a36      	subs	r6, r6, r0
 8002dbc:	e7ea      	b.n	8002d94 <__sflush_r+0xd4>
 8002dbe:	bf00      	nop
 8002dc0:	20400001 	.word	0x20400001

08002dc4 <_fflush_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	690b      	ldr	r3, [r1, #16]
 8002dc8:	4605      	mov	r5, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	b913      	cbnz	r3, 8002dd4 <_fflush_r+0x10>
 8002dce:	2500      	movs	r5, #0
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	b118      	cbz	r0, 8002dde <_fflush_r+0x1a>
 8002dd6:	6983      	ldr	r3, [r0, #24]
 8002dd8:	b90b      	cbnz	r3, 8002dde <_fflush_r+0x1a>
 8002dda:	f000 f887 	bl	8002eec <__sinit>
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <_fflush_r+0x6c>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d11b      	bne.n	8002e1c <_fflush_r+0x58>
 8002de4:	686c      	ldr	r4, [r5, #4]
 8002de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ef      	beq.n	8002dce <_fflush_r+0xa>
 8002dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002df0:	07d0      	lsls	r0, r2, #31
 8002df2:	d404      	bmi.n	8002dfe <_fflush_r+0x3a>
 8002df4:	0599      	lsls	r1, r3, #22
 8002df6:	d402      	bmi.n	8002dfe <_fflush_r+0x3a>
 8002df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dfa:	f000 f915 	bl	8003028 <__retarget_lock_acquire_recursive>
 8002dfe:	4628      	mov	r0, r5
 8002e00:	4621      	mov	r1, r4
 8002e02:	f7ff ff5d 	bl	8002cc0 <__sflush_r>
 8002e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e08:	4605      	mov	r5, r0
 8002e0a:	07da      	lsls	r2, r3, #31
 8002e0c:	d4e0      	bmi.n	8002dd0 <_fflush_r+0xc>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	059b      	lsls	r3, r3, #22
 8002e12:	d4dd      	bmi.n	8002dd0 <_fflush_r+0xc>
 8002e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e16:	f000 f908 	bl	800302a <__retarget_lock_release_recursive>
 8002e1a:	e7d9      	b.n	8002dd0 <_fflush_r+0xc>
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <_fflush_r+0x70>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d101      	bne.n	8002e26 <_fflush_r+0x62>
 8002e22:	68ac      	ldr	r4, [r5, #8]
 8002e24:	e7df      	b.n	8002de6 <_fflush_r+0x22>
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <_fflush_r+0x74>)
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	bf08      	it	eq
 8002e2c:	68ec      	ldreq	r4, [r5, #12]
 8002e2e:	e7da      	b.n	8002de6 <_fflush_r+0x22>
 8002e30:	08003ac0 	.word	0x08003ac0
 8002e34:	08003ae0 	.word	0x08003ae0
 8002e38:	08003aa0 	.word	0x08003aa0

08002e3c <std>:
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	b510      	push	{r4, lr}
 8002e40:	4604      	mov	r4, r0
 8002e42:	e9c0 3300 	strd	r3, r3, [r0]
 8002e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e4a:	6083      	str	r3, [r0, #8]
 8002e4c:	8181      	strh	r1, [r0, #12]
 8002e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e50:	81c2      	strh	r2, [r0, #14]
 8002e52:	6183      	str	r3, [r0, #24]
 8002e54:	4619      	mov	r1, r3
 8002e56:	2208      	movs	r2, #8
 8002e58:	305c      	adds	r0, #92	; 0x5c
 8002e5a:	f7ff fddb 	bl	8002a14 <memset>
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <std+0x38>)
 8002e60:	6224      	str	r4, [r4, #32]
 8002e62:	6263      	str	r3, [r4, #36]	; 0x24
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <std+0x3c>)
 8002e66:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <std+0x40>)
 8002e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <std+0x44>)
 8002e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	bf00      	nop
 8002e74:	080038ad 	.word	0x080038ad
 8002e78:	080038cf 	.word	0x080038cf
 8002e7c:	08003907 	.word	0x08003907
 8002e80:	0800392b 	.word	0x0800392b

08002e84 <_cleanup_r>:
 8002e84:	4901      	ldr	r1, [pc, #4]	; (8002e8c <_cleanup_r+0x8>)
 8002e86:	f000 b8af 	b.w	8002fe8 <_fwalk_reent>
 8002e8a:	bf00      	nop
 8002e8c:	08002dc5 	.word	0x08002dc5

08002e90 <__sfmoreglue>:
 8002e90:	2268      	movs	r2, #104	; 0x68
 8002e92:	b570      	push	{r4, r5, r6, lr}
 8002e94:	1e4d      	subs	r5, r1, #1
 8002e96:	4355      	muls	r5, r2
 8002e98:	460e      	mov	r6, r1
 8002e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e9e:	f000 f993 	bl	80031c8 <_malloc_r>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	b140      	cbz	r0, 8002eb8 <__sfmoreglue+0x28>
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8002eac:	300c      	adds	r0, #12
 8002eae:	60a0      	str	r0, [r4, #8]
 8002eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002eb4:	f7ff fdae 	bl	8002a14 <memset>
 8002eb8:	4620      	mov	r0, r4
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <__sfp_lock_acquire>:
 8002ebc:	4801      	ldr	r0, [pc, #4]	; (8002ec4 <__sfp_lock_acquire+0x8>)
 8002ebe:	f000 b8b3 	b.w	8003028 <__retarget_lock_acquire_recursive>
 8002ec2:	bf00      	nop
 8002ec4:	200001c1 	.word	0x200001c1

08002ec8 <__sfp_lock_release>:
 8002ec8:	4801      	ldr	r0, [pc, #4]	; (8002ed0 <__sfp_lock_release+0x8>)
 8002eca:	f000 b8ae 	b.w	800302a <__retarget_lock_release_recursive>
 8002ece:	bf00      	nop
 8002ed0:	200001c1 	.word	0x200001c1

08002ed4 <__sinit_lock_acquire>:
 8002ed4:	4801      	ldr	r0, [pc, #4]	; (8002edc <__sinit_lock_acquire+0x8>)
 8002ed6:	f000 b8a7 	b.w	8003028 <__retarget_lock_acquire_recursive>
 8002eda:	bf00      	nop
 8002edc:	200001c2 	.word	0x200001c2

08002ee0 <__sinit_lock_release>:
 8002ee0:	4801      	ldr	r0, [pc, #4]	; (8002ee8 <__sinit_lock_release+0x8>)
 8002ee2:	f000 b8a2 	b.w	800302a <__retarget_lock_release_recursive>
 8002ee6:	bf00      	nop
 8002ee8:	200001c2 	.word	0x200001c2

08002eec <__sinit>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4604      	mov	r4, r0
 8002ef0:	f7ff fff0 	bl	8002ed4 <__sinit_lock_acquire>
 8002ef4:	69a3      	ldr	r3, [r4, #24]
 8002ef6:	b11b      	cbz	r3, 8002f00 <__sinit+0x14>
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002efc:	f7ff bff0 	b.w	8002ee0 <__sinit_lock_release>
 8002f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f04:	6523      	str	r3, [r4, #80]	; 0x50
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <__sinit+0x68>)
 8002f08:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <__sinit+0x6c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f0e:	42a3      	cmp	r3, r4
 8002f10:	bf08      	it	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	4620      	mov	r0, r4
 8002f16:	bf08      	it	eq
 8002f18:	61a3      	streq	r3, [r4, #24]
 8002f1a:	f000 f81f 	bl	8002f5c <__sfp>
 8002f1e:	6060      	str	r0, [r4, #4]
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 f81b 	bl	8002f5c <__sfp>
 8002f26:	60a0      	str	r0, [r4, #8]
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f000 f817 	bl	8002f5c <__sfp>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2104      	movs	r1, #4
 8002f32:	60e0      	str	r0, [r4, #12]
 8002f34:	6860      	ldr	r0, [r4, #4]
 8002f36:	f7ff ff81 	bl	8002e3c <std>
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2109      	movs	r1, #9
 8002f3e:	68a0      	ldr	r0, [r4, #8]
 8002f40:	f7ff ff7c 	bl	8002e3c <std>
 8002f44:	2202      	movs	r2, #2
 8002f46:	2112      	movs	r1, #18
 8002f48:	68e0      	ldr	r0, [r4, #12]
 8002f4a:	f7ff ff77 	bl	8002e3c <std>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61a3      	str	r3, [r4, #24]
 8002f52:	e7d1      	b.n	8002ef8 <__sinit+0xc>
 8002f54:	08003a9c 	.word	0x08003a9c
 8002f58:	08002e85 	.word	0x08002e85

08002f5c <__sfp>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	4607      	mov	r7, r0
 8002f60:	f7ff ffac 	bl	8002ebc <__sfp_lock_acquire>
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <__sfp+0x84>)
 8002f66:	681e      	ldr	r6, [r3, #0]
 8002f68:	69b3      	ldr	r3, [r6, #24]
 8002f6a:	b913      	cbnz	r3, 8002f72 <__sfp+0x16>
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f7ff ffbd 	bl	8002eec <__sinit>
 8002f72:	3648      	adds	r6, #72	; 0x48
 8002f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	d503      	bpl.n	8002f84 <__sfp+0x28>
 8002f7c:	6833      	ldr	r3, [r6, #0]
 8002f7e:	b30b      	cbz	r3, 8002fc4 <__sfp+0x68>
 8002f80:	6836      	ldr	r6, [r6, #0]
 8002f82:	e7f7      	b.n	8002f74 <__sfp+0x18>
 8002f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f88:	b9d5      	cbnz	r5, 8002fc0 <__sfp+0x64>
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <__sfp+0x88>)
 8002f8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f90:	60e3      	str	r3, [r4, #12]
 8002f92:	6665      	str	r5, [r4, #100]	; 0x64
 8002f94:	f000 f847 	bl	8003026 <__retarget_lock_init_recursive>
 8002f98:	f7ff ff96 	bl	8002ec8 <__sfp_lock_release>
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fa8:	6025      	str	r5, [r4, #0]
 8002faa:	61a5      	str	r5, [r4, #24]
 8002fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fb0:	f7ff fd30 	bl	8002a14 <memset>
 8002fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc0:	3468      	adds	r4, #104	; 0x68
 8002fc2:	e7d9      	b.n	8002f78 <__sfp+0x1c>
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	f7ff ff62 	bl	8002e90 <__sfmoreglue>
 8002fcc:	4604      	mov	r4, r0
 8002fce:	6030      	str	r0, [r6, #0]
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d1d5      	bne.n	8002f80 <__sfp+0x24>
 8002fd4:	f7ff ff78 	bl	8002ec8 <__sfp_lock_release>
 8002fd8:	230c      	movs	r3, #12
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	e7ee      	b.n	8002fbc <__sfp+0x60>
 8002fde:	bf00      	nop
 8002fe0:	08003a9c 	.word	0x08003a9c
 8002fe4:	ffff0001 	.word	0xffff0001

08002fe8 <_fwalk_reent>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	4606      	mov	r6, r0
 8002fee:	4688      	mov	r8, r1
 8002ff0:	2700      	movs	r7, #0
 8002ff2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8002ffe:	d505      	bpl.n	800300c <_fwalk_reent+0x24>
 8003000:	6824      	ldr	r4, [r4, #0]
 8003002:	2c00      	cmp	r4, #0
 8003004:	d1f7      	bne.n	8002ff6 <_fwalk_reent+0xe>
 8003006:	4638      	mov	r0, r7
 8003008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800300c:	89ab      	ldrh	r3, [r5, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d907      	bls.n	8003022 <_fwalk_reent+0x3a>
 8003012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003016:	3301      	adds	r3, #1
 8003018:	d003      	beq.n	8003022 <_fwalk_reent+0x3a>
 800301a:	4629      	mov	r1, r5
 800301c:	4630      	mov	r0, r6
 800301e:	47c0      	blx	r8
 8003020:	4307      	orrs	r7, r0
 8003022:	3568      	adds	r5, #104	; 0x68
 8003024:	e7e9      	b.n	8002ffa <_fwalk_reent+0x12>

08003026 <__retarget_lock_init_recursive>:
 8003026:	4770      	bx	lr

08003028 <__retarget_lock_acquire_recursive>:
 8003028:	4770      	bx	lr

0800302a <__retarget_lock_release_recursive>:
 800302a:	4770      	bx	lr

0800302c <__swhatbuf_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	460e      	mov	r6, r1
 8003030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003034:	4614      	mov	r4, r2
 8003036:	2900      	cmp	r1, #0
 8003038:	461d      	mov	r5, r3
 800303a:	b096      	sub	sp, #88	; 0x58
 800303c:	da08      	bge.n	8003050 <__swhatbuf_r+0x24>
 800303e:	2200      	movs	r2, #0
 8003040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003044:	602a      	str	r2, [r5, #0]
 8003046:	061a      	lsls	r2, r3, #24
 8003048:	d410      	bmi.n	800306c <__swhatbuf_r+0x40>
 800304a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800304e:	e00e      	b.n	800306e <__swhatbuf_r+0x42>
 8003050:	466a      	mov	r2, sp
 8003052:	f000 fc91 	bl	8003978 <_fstat_r>
 8003056:	2800      	cmp	r0, #0
 8003058:	dbf1      	blt.n	800303e <__swhatbuf_r+0x12>
 800305a:	9a01      	ldr	r2, [sp, #4]
 800305c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003064:	425a      	negs	r2, r3
 8003066:	415a      	adcs	r2, r3
 8003068:	602a      	str	r2, [r5, #0]
 800306a:	e7ee      	b.n	800304a <__swhatbuf_r+0x1e>
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	2000      	movs	r0, #0
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	b016      	add	sp, #88	; 0x58
 8003074:	bd70      	pop	{r4, r5, r6, pc}
	...

08003078 <__smakebuf_r>:
 8003078:	898b      	ldrh	r3, [r1, #12]
 800307a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800307c:	079d      	lsls	r5, r3, #30
 800307e:	4606      	mov	r6, r0
 8003080:	460c      	mov	r4, r1
 8003082:	d507      	bpl.n	8003094 <__smakebuf_r+0x1c>
 8003084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	2301      	movs	r3, #1
 800308e:	6163      	str	r3, [r4, #20]
 8003090:	b002      	add	sp, #8
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	466a      	mov	r2, sp
 8003096:	ab01      	add	r3, sp, #4
 8003098:	f7ff ffc8 	bl	800302c <__swhatbuf_r>
 800309c:	9900      	ldr	r1, [sp, #0]
 800309e:	4605      	mov	r5, r0
 80030a0:	4630      	mov	r0, r6
 80030a2:	f000 f891 	bl	80031c8 <_malloc_r>
 80030a6:	b948      	cbnz	r0, 80030bc <__smakebuf_r+0x44>
 80030a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ac:	059a      	lsls	r2, r3, #22
 80030ae:	d4ef      	bmi.n	8003090 <__smakebuf_r+0x18>
 80030b0:	f023 0303 	bic.w	r3, r3, #3
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	e7e3      	b.n	8003084 <__smakebuf_r+0xc>
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <__smakebuf_r+0x7c>)
 80030be:	62b3      	str	r3, [r6, #40]	; 0x28
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	6020      	str	r0, [r4, #0]
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	9b00      	ldr	r3, [sp, #0]
 80030cc:	6120      	str	r0, [r4, #16]
 80030ce:	6163      	str	r3, [r4, #20]
 80030d0:	9b01      	ldr	r3, [sp, #4]
 80030d2:	b15b      	cbz	r3, 80030ec <__smakebuf_r+0x74>
 80030d4:	4630      	mov	r0, r6
 80030d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030da:	f000 fc5f 	bl	800399c <_isatty_r>
 80030de:	b128      	cbz	r0, 80030ec <__smakebuf_r+0x74>
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	81a3      	strh	r3, [r4, #12]
 80030ec:	89a0      	ldrh	r0, [r4, #12]
 80030ee:	4305      	orrs	r5, r0
 80030f0:	81a5      	strh	r5, [r4, #12]
 80030f2:	e7cd      	b.n	8003090 <__smakebuf_r+0x18>
 80030f4:	08002e85 	.word	0x08002e85

080030f8 <_free_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d040      	beq.n	8003182 <_free_r+0x8a>
 8003100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003104:	1f0c      	subs	r4, r1, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfb8      	it	lt
 800310a:	18e4      	addlt	r4, r4, r3
 800310c:	f000 fc76 	bl	80039fc <__malloc_lock>
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <_free_r+0x8c>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	b933      	cbnz	r3, 8003124 <_free_r+0x2c>
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	6014      	str	r4, [r2, #0]
 800311a:	4628      	mov	r0, r5
 800311c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003120:	f000 bc72 	b.w	8003a08 <__malloc_unlock>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d908      	bls.n	800313a <_free_r+0x42>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	1821      	adds	r1, r4, r0
 800312c:	428b      	cmp	r3, r1
 800312e:	bf01      	itttt	eq
 8003130:	6819      	ldreq	r1, [r3, #0]
 8003132:	685b      	ldreq	r3, [r3, #4]
 8003134:	1809      	addeq	r1, r1, r0
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	e7ed      	b.n	8003116 <_free_r+0x1e>
 800313a:	461a      	mov	r2, r3
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b10b      	cbz	r3, 8003144 <_free_r+0x4c>
 8003140:	42a3      	cmp	r3, r4
 8003142:	d9fa      	bls.n	800313a <_free_r+0x42>
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	1850      	adds	r0, r2, r1
 8003148:	42a0      	cmp	r0, r4
 800314a:	d10b      	bne.n	8003164 <_free_r+0x6c>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	4401      	add	r1, r0
 8003150:	1850      	adds	r0, r2, r1
 8003152:	4283      	cmp	r3, r0
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	d1e0      	bne.n	800311a <_free_r+0x22>
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4401      	add	r1, r0
 800315e:	6011      	str	r1, [r2, #0]
 8003160:	6053      	str	r3, [r2, #4]
 8003162:	e7da      	b.n	800311a <_free_r+0x22>
 8003164:	d902      	bls.n	800316c <_free_r+0x74>
 8003166:	230c      	movs	r3, #12
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	e7d6      	b.n	800311a <_free_r+0x22>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	1821      	adds	r1, r4, r0
 8003170:	428b      	cmp	r3, r1
 8003172:	bf01      	itttt	eq
 8003174:	6819      	ldreq	r1, [r3, #0]
 8003176:	685b      	ldreq	r3, [r3, #4]
 8003178:	1809      	addeq	r1, r1, r0
 800317a:	6021      	streq	r1, [r4, #0]
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	6054      	str	r4, [r2, #4]
 8003180:	e7cb      	b.n	800311a <_free_r+0x22>
 8003182:	bd38      	pop	{r3, r4, r5, pc}
 8003184:	200001c4 	.word	0x200001c4

08003188 <sbrk_aligned>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4e0e      	ldr	r6, [pc, #56]	; (80031c4 <sbrk_aligned+0x3c>)
 800318c:	460c      	mov	r4, r1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	b911      	cbnz	r1, 800319a <sbrk_aligned+0x12>
 8003194:	f000 fb7a 	bl	800388c <_sbrk_r>
 8003198:	6030      	str	r0, [r6, #0]
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 fb75 	bl	800388c <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d00a      	beq.n	80031bc <sbrk_aligned+0x34>
 80031a6:	1cc4      	adds	r4, r0, #3
 80031a8:	f024 0403 	bic.w	r4, r4, #3
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d007      	beq.n	80031c0 <sbrk_aligned+0x38>
 80031b0:	1a21      	subs	r1, r4, r0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 fb6a 	bl	800388c <_sbrk_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d101      	bne.n	80031c0 <sbrk_aligned+0x38>
 80031bc:	f04f 34ff 	mov.w	r4, #4294967295
 80031c0:	4620      	mov	r0, r4
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	200001c8 	.word	0x200001c8

080031c8 <_malloc_r>:
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	1ccd      	adds	r5, r1, #3
 80031ce:	f025 0503 	bic.w	r5, r5, #3
 80031d2:	3508      	adds	r5, #8
 80031d4:	2d0c      	cmp	r5, #12
 80031d6:	bf38      	it	cc
 80031d8:	250c      	movcc	r5, #12
 80031da:	2d00      	cmp	r5, #0
 80031dc:	4607      	mov	r7, r0
 80031de:	db01      	blt.n	80031e4 <_malloc_r+0x1c>
 80031e0:	42a9      	cmp	r1, r5
 80031e2:	d905      	bls.n	80031f0 <_malloc_r+0x28>
 80031e4:	230c      	movs	r3, #12
 80031e6:	2600      	movs	r6, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4630      	mov	r0, r6
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	4e2e      	ldr	r6, [pc, #184]	; (80032ac <_malloc_r+0xe4>)
 80031f2:	f000 fc03 	bl	80039fc <__malloc_lock>
 80031f6:	6833      	ldr	r3, [r6, #0]
 80031f8:	461c      	mov	r4, r3
 80031fa:	bb34      	cbnz	r4, 800324a <_malloc_r+0x82>
 80031fc:	4629      	mov	r1, r5
 80031fe:	4638      	mov	r0, r7
 8003200:	f7ff ffc2 	bl	8003188 <sbrk_aligned>
 8003204:	1c43      	adds	r3, r0, #1
 8003206:	4604      	mov	r4, r0
 8003208:	d14d      	bne.n	80032a6 <_malloc_r+0xde>
 800320a:	6834      	ldr	r4, [r6, #0]
 800320c:	4626      	mov	r6, r4
 800320e:	2e00      	cmp	r6, #0
 8003210:	d140      	bne.n	8003294 <_malloc_r+0xcc>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	4631      	mov	r1, r6
 8003216:	4638      	mov	r0, r7
 8003218:	eb04 0803 	add.w	r8, r4, r3
 800321c:	f000 fb36 	bl	800388c <_sbrk_r>
 8003220:	4580      	cmp	r8, r0
 8003222:	d13a      	bne.n	800329a <_malloc_r+0xd2>
 8003224:	6821      	ldr	r1, [r4, #0]
 8003226:	3503      	adds	r5, #3
 8003228:	1a6d      	subs	r5, r5, r1
 800322a:	f025 0503 	bic.w	r5, r5, #3
 800322e:	3508      	adds	r5, #8
 8003230:	2d0c      	cmp	r5, #12
 8003232:	bf38      	it	cc
 8003234:	250c      	movcc	r5, #12
 8003236:	4638      	mov	r0, r7
 8003238:	4629      	mov	r1, r5
 800323a:	f7ff ffa5 	bl	8003188 <sbrk_aligned>
 800323e:	3001      	adds	r0, #1
 8003240:	d02b      	beq.n	800329a <_malloc_r+0xd2>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	442b      	add	r3, r5
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	e00e      	b.n	8003268 <_malloc_r+0xa0>
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	1b52      	subs	r2, r2, r5
 800324e:	d41e      	bmi.n	800328e <_malloc_r+0xc6>
 8003250:	2a0b      	cmp	r2, #11
 8003252:	d916      	bls.n	8003282 <_malloc_r+0xba>
 8003254:	1961      	adds	r1, r4, r5
 8003256:	42a3      	cmp	r3, r4
 8003258:	6025      	str	r5, [r4, #0]
 800325a:	bf18      	it	ne
 800325c:	6059      	strne	r1, [r3, #4]
 800325e:	6863      	ldr	r3, [r4, #4]
 8003260:	bf08      	it	eq
 8003262:	6031      	streq	r1, [r6, #0]
 8003264:	5162      	str	r2, [r4, r5]
 8003266:	604b      	str	r3, [r1, #4]
 8003268:	4638      	mov	r0, r7
 800326a:	f104 060b 	add.w	r6, r4, #11
 800326e:	f000 fbcb 	bl	8003a08 <__malloc_unlock>
 8003272:	f026 0607 	bic.w	r6, r6, #7
 8003276:	1d23      	adds	r3, r4, #4
 8003278:	1af2      	subs	r2, r6, r3
 800327a:	d0b6      	beq.n	80031ea <_malloc_r+0x22>
 800327c:	1b9b      	subs	r3, r3, r6
 800327e:	50a3      	str	r3, [r4, r2]
 8003280:	e7b3      	b.n	80031ea <_malloc_r+0x22>
 8003282:	6862      	ldr	r2, [r4, #4]
 8003284:	42a3      	cmp	r3, r4
 8003286:	bf0c      	ite	eq
 8003288:	6032      	streq	r2, [r6, #0]
 800328a:	605a      	strne	r2, [r3, #4]
 800328c:	e7ec      	b.n	8003268 <_malloc_r+0xa0>
 800328e:	4623      	mov	r3, r4
 8003290:	6864      	ldr	r4, [r4, #4]
 8003292:	e7b2      	b.n	80031fa <_malloc_r+0x32>
 8003294:	4634      	mov	r4, r6
 8003296:	6876      	ldr	r6, [r6, #4]
 8003298:	e7b9      	b.n	800320e <_malloc_r+0x46>
 800329a:	230c      	movs	r3, #12
 800329c:	4638      	mov	r0, r7
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	f000 fbb2 	bl	8003a08 <__malloc_unlock>
 80032a4:	e7a1      	b.n	80031ea <_malloc_r+0x22>
 80032a6:	6025      	str	r5, [r4, #0]
 80032a8:	e7de      	b.n	8003268 <_malloc_r+0xa0>
 80032aa:	bf00      	nop
 80032ac:	200001c4 	.word	0x200001c4

080032b0 <__sfputc_r>:
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	b410      	push	{r4}
 80032b4:	3b01      	subs	r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	da07      	bge.n	80032cc <__sfputc_r+0x1c>
 80032bc:	6994      	ldr	r4, [r2, #24]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	db01      	blt.n	80032c6 <__sfputc_r+0x16>
 80032c2:	290a      	cmp	r1, #10
 80032c4:	d102      	bne.n	80032cc <__sfputc_r+0x1c>
 80032c6:	bc10      	pop	{r4}
 80032c8:	f7ff bc3a 	b.w	8002b40 <__swbuf_r>
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	1c58      	adds	r0, r3, #1
 80032d0:	6010      	str	r0, [r2, #0]
 80032d2:	7019      	strb	r1, [r3, #0]
 80032d4:	4608      	mov	r0, r1
 80032d6:	bc10      	pop	{r4}
 80032d8:	4770      	bx	lr

080032da <__sfputs_r>:
 80032da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032dc:	4606      	mov	r6, r0
 80032de:	460f      	mov	r7, r1
 80032e0:	4614      	mov	r4, r2
 80032e2:	18d5      	adds	r5, r2, r3
 80032e4:	42ac      	cmp	r4, r5
 80032e6:	d101      	bne.n	80032ec <__sfputs_r+0x12>
 80032e8:	2000      	movs	r0, #0
 80032ea:	e007      	b.n	80032fc <__sfputs_r+0x22>
 80032ec:	463a      	mov	r2, r7
 80032ee:	4630      	mov	r0, r6
 80032f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f4:	f7ff ffdc 	bl	80032b0 <__sfputc_r>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d1f3      	bne.n	80032e4 <__sfputs_r+0xa>
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003300 <_vfiprintf_r>:
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	460d      	mov	r5, r1
 8003306:	4614      	mov	r4, r2
 8003308:	4698      	mov	r8, r3
 800330a:	4606      	mov	r6, r0
 800330c:	b09d      	sub	sp, #116	; 0x74
 800330e:	b118      	cbz	r0, 8003318 <_vfiprintf_r+0x18>
 8003310:	6983      	ldr	r3, [r0, #24]
 8003312:	b90b      	cbnz	r3, 8003318 <_vfiprintf_r+0x18>
 8003314:	f7ff fdea 	bl	8002eec <__sinit>
 8003318:	4b89      	ldr	r3, [pc, #548]	; (8003540 <_vfiprintf_r+0x240>)
 800331a:	429d      	cmp	r5, r3
 800331c:	d11b      	bne.n	8003356 <_vfiprintf_r+0x56>
 800331e:	6875      	ldr	r5, [r6, #4]
 8003320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003322:	07d9      	lsls	r1, r3, #31
 8003324:	d405      	bmi.n	8003332 <_vfiprintf_r+0x32>
 8003326:	89ab      	ldrh	r3, [r5, #12]
 8003328:	059a      	lsls	r2, r3, #22
 800332a:	d402      	bmi.n	8003332 <_vfiprintf_r+0x32>
 800332c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800332e:	f7ff fe7b 	bl	8003028 <__retarget_lock_acquire_recursive>
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	d501      	bpl.n	800333c <_vfiprintf_r+0x3c>
 8003338:	692b      	ldr	r3, [r5, #16]
 800333a:	b9eb      	cbnz	r3, 8003378 <_vfiprintf_r+0x78>
 800333c:	4629      	mov	r1, r5
 800333e:	4630      	mov	r0, r6
 8003340:	f7ff fc50 	bl	8002be4 <__swsetup_r>
 8003344:	b1c0      	cbz	r0, 8003378 <_vfiprintf_r+0x78>
 8003346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003348:	07dc      	lsls	r4, r3, #31
 800334a:	d50e      	bpl.n	800336a <_vfiprintf_r+0x6a>
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	b01d      	add	sp, #116	; 0x74
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003356:	4b7b      	ldr	r3, [pc, #492]	; (8003544 <_vfiprintf_r+0x244>)
 8003358:	429d      	cmp	r5, r3
 800335a:	d101      	bne.n	8003360 <_vfiprintf_r+0x60>
 800335c:	68b5      	ldr	r5, [r6, #8]
 800335e:	e7df      	b.n	8003320 <_vfiprintf_r+0x20>
 8003360:	4b79      	ldr	r3, [pc, #484]	; (8003548 <_vfiprintf_r+0x248>)
 8003362:	429d      	cmp	r5, r3
 8003364:	bf08      	it	eq
 8003366:	68f5      	ldreq	r5, [r6, #12]
 8003368:	e7da      	b.n	8003320 <_vfiprintf_r+0x20>
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	0598      	lsls	r0, r3, #22
 800336e:	d4ed      	bmi.n	800334c <_vfiprintf_r+0x4c>
 8003370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003372:	f7ff fe5a 	bl	800302a <__retarget_lock_release_recursive>
 8003376:	e7e9      	b.n	800334c <_vfiprintf_r+0x4c>
 8003378:	2300      	movs	r3, #0
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	2320      	movs	r3, #32
 800337e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003382:	2330      	movs	r3, #48	; 0x30
 8003384:	f04f 0901 	mov.w	r9, #1
 8003388:	f8cd 800c 	str.w	r8, [sp, #12]
 800338c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800354c <_vfiprintf_r+0x24c>
 8003390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003394:	4623      	mov	r3, r4
 8003396:	469a      	mov	sl, r3
 8003398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800339c:	b10a      	cbz	r2, 80033a2 <_vfiprintf_r+0xa2>
 800339e:	2a25      	cmp	r2, #37	; 0x25
 80033a0:	d1f9      	bne.n	8003396 <_vfiprintf_r+0x96>
 80033a2:	ebba 0b04 	subs.w	fp, sl, r4
 80033a6:	d00b      	beq.n	80033c0 <_vfiprintf_r+0xc0>
 80033a8:	465b      	mov	r3, fp
 80033aa:	4622      	mov	r2, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	4630      	mov	r0, r6
 80033b0:	f7ff ff93 	bl	80032da <__sfputs_r>
 80033b4:	3001      	adds	r0, #1
 80033b6:	f000 80aa 	beq.w	800350e <_vfiprintf_r+0x20e>
 80033ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033bc:	445a      	add	r2, fp
 80033be:	9209      	str	r2, [sp, #36]	; 0x24
 80033c0:	f89a 3000 	ldrb.w	r3, [sl]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a2 	beq.w	800350e <_vfiprintf_r+0x20e>
 80033ca:	2300      	movs	r3, #0
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d4:	f10a 0a01 	add.w	sl, sl, #1
 80033d8:	9304      	str	r3, [sp, #16]
 80033da:	9307      	str	r3, [sp, #28]
 80033dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033e0:	931a      	str	r3, [sp, #104]	; 0x68
 80033e2:	4654      	mov	r4, sl
 80033e4:	2205      	movs	r2, #5
 80033e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ea:	4858      	ldr	r0, [pc, #352]	; (800354c <_vfiprintf_r+0x24c>)
 80033ec:	f000 faf8 	bl	80039e0 <memchr>
 80033f0:	9a04      	ldr	r2, [sp, #16]
 80033f2:	b9d8      	cbnz	r0, 800342c <_vfiprintf_r+0x12c>
 80033f4:	06d1      	lsls	r1, r2, #27
 80033f6:	bf44      	itt	mi
 80033f8:	2320      	movmi	r3, #32
 80033fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033fe:	0713      	lsls	r3, r2, #28
 8003400:	bf44      	itt	mi
 8003402:	232b      	movmi	r3, #43	; 0x2b
 8003404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003408:	f89a 3000 	ldrb.w	r3, [sl]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	d015      	beq.n	800343c <_vfiprintf_r+0x13c>
 8003410:	4654      	mov	r4, sl
 8003412:	2000      	movs	r0, #0
 8003414:	f04f 0c0a 	mov.w	ip, #10
 8003418:	9a07      	ldr	r2, [sp, #28]
 800341a:	4621      	mov	r1, r4
 800341c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003420:	3b30      	subs	r3, #48	; 0x30
 8003422:	2b09      	cmp	r3, #9
 8003424:	d94e      	bls.n	80034c4 <_vfiprintf_r+0x1c4>
 8003426:	b1b0      	cbz	r0, 8003456 <_vfiprintf_r+0x156>
 8003428:	9207      	str	r2, [sp, #28]
 800342a:	e014      	b.n	8003456 <_vfiprintf_r+0x156>
 800342c:	eba0 0308 	sub.w	r3, r0, r8
 8003430:	fa09 f303 	lsl.w	r3, r9, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	46a2      	mov	sl, r4
 8003438:	9304      	str	r3, [sp, #16]
 800343a:	e7d2      	b.n	80033e2 <_vfiprintf_r+0xe2>
 800343c:	9b03      	ldr	r3, [sp, #12]
 800343e:	1d19      	adds	r1, r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	9103      	str	r1, [sp, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfbb      	ittet	lt
 8003448:	425b      	neglt	r3, r3
 800344a:	f042 0202 	orrlt.w	r2, r2, #2
 800344e:	9307      	strge	r3, [sp, #28]
 8003450:	9307      	strlt	r3, [sp, #28]
 8003452:	bfb8      	it	lt
 8003454:	9204      	strlt	r2, [sp, #16]
 8003456:	7823      	ldrb	r3, [r4, #0]
 8003458:	2b2e      	cmp	r3, #46	; 0x2e
 800345a:	d10c      	bne.n	8003476 <_vfiprintf_r+0x176>
 800345c:	7863      	ldrb	r3, [r4, #1]
 800345e:	2b2a      	cmp	r3, #42	; 0x2a
 8003460:	d135      	bne.n	80034ce <_vfiprintf_r+0x1ce>
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	3402      	adds	r4, #2
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	9203      	str	r2, [sp, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	bfb8      	it	lt
 8003470:	f04f 33ff 	movlt.w	r3, #4294967295
 8003474:	9305      	str	r3, [sp, #20]
 8003476:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003550 <_vfiprintf_r+0x250>
 800347a:	2203      	movs	r2, #3
 800347c:	4650      	mov	r0, sl
 800347e:	7821      	ldrb	r1, [r4, #0]
 8003480:	f000 faae 	bl	80039e0 <memchr>
 8003484:	b140      	cbz	r0, 8003498 <_vfiprintf_r+0x198>
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	eba0 000a 	sub.w	r0, r0, sl
 800348c:	fa03 f000 	lsl.w	r0, r3, r0
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	3401      	adds	r4, #1
 8003494:	4303      	orrs	r3, r0
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349c:	2206      	movs	r2, #6
 800349e:	482d      	ldr	r0, [pc, #180]	; (8003554 <_vfiprintf_r+0x254>)
 80034a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034a4:	f000 fa9c 	bl	80039e0 <memchr>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d03f      	beq.n	800352c <_vfiprintf_r+0x22c>
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <_vfiprintf_r+0x258>)
 80034ae:	bb1b      	cbnz	r3, 80034f8 <_vfiprintf_r+0x1f8>
 80034b0:	9b03      	ldr	r3, [sp, #12]
 80034b2:	3307      	adds	r3, #7
 80034b4:	f023 0307 	bic.w	r3, r3, #7
 80034b8:	3308      	adds	r3, #8
 80034ba:	9303      	str	r3, [sp, #12]
 80034bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034be:	443b      	add	r3, r7
 80034c0:	9309      	str	r3, [sp, #36]	; 0x24
 80034c2:	e767      	b.n	8003394 <_vfiprintf_r+0x94>
 80034c4:	460c      	mov	r4, r1
 80034c6:	2001      	movs	r0, #1
 80034c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80034cc:	e7a5      	b.n	800341a <_vfiprintf_r+0x11a>
 80034ce:	2300      	movs	r3, #0
 80034d0:	f04f 0c0a 	mov.w	ip, #10
 80034d4:	4619      	mov	r1, r3
 80034d6:	3401      	adds	r4, #1
 80034d8:	9305      	str	r3, [sp, #20]
 80034da:	4620      	mov	r0, r4
 80034dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e0:	3a30      	subs	r2, #48	; 0x30
 80034e2:	2a09      	cmp	r2, #9
 80034e4:	d903      	bls.n	80034ee <_vfiprintf_r+0x1ee>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0c5      	beq.n	8003476 <_vfiprintf_r+0x176>
 80034ea:	9105      	str	r1, [sp, #20]
 80034ec:	e7c3      	b.n	8003476 <_vfiprintf_r+0x176>
 80034ee:	4604      	mov	r4, r0
 80034f0:	2301      	movs	r3, #1
 80034f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f6:	e7f0      	b.n	80034da <_vfiprintf_r+0x1da>
 80034f8:	ab03      	add	r3, sp, #12
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	462a      	mov	r2, r5
 80034fe:	4630      	mov	r0, r6
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <_vfiprintf_r+0x25c>)
 8003502:	a904      	add	r1, sp, #16
 8003504:	f3af 8000 	nop.w
 8003508:	4607      	mov	r7, r0
 800350a:	1c78      	adds	r0, r7, #1
 800350c:	d1d6      	bne.n	80034bc <_vfiprintf_r+0x1bc>
 800350e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003510:	07d9      	lsls	r1, r3, #31
 8003512:	d405      	bmi.n	8003520 <_vfiprintf_r+0x220>
 8003514:	89ab      	ldrh	r3, [r5, #12]
 8003516:	059a      	lsls	r2, r3, #22
 8003518:	d402      	bmi.n	8003520 <_vfiprintf_r+0x220>
 800351a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800351c:	f7ff fd85 	bl	800302a <__retarget_lock_release_recursive>
 8003520:	89ab      	ldrh	r3, [r5, #12]
 8003522:	065b      	lsls	r3, r3, #25
 8003524:	f53f af12 	bmi.w	800334c <_vfiprintf_r+0x4c>
 8003528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352a:	e711      	b.n	8003350 <_vfiprintf_r+0x50>
 800352c:	ab03      	add	r3, sp, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	462a      	mov	r2, r5
 8003532:	4630      	mov	r0, r6
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <_vfiprintf_r+0x25c>)
 8003536:	a904      	add	r1, sp, #16
 8003538:	f000 f882 	bl	8003640 <_printf_i>
 800353c:	e7e4      	b.n	8003508 <_vfiprintf_r+0x208>
 800353e:	bf00      	nop
 8003540:	08003ac0 	.word	0x08003ac0
 8003544:	08003ae0 	.word	0x08003ae0
 8003548:	08003aa0 	.word	0x08003aa0
 800354c:	08003b00 	.word	0x08003b00
 8003550:	08003b06 	.word	0x08003b06
 8003554:	08003b0a 	.word	0x08003b0a
 8003558:	00000000 	.word	0x00000000
 800355c:	080032db 	.word	0x080032db

08003560 <_printf_common>:
 8003560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	4616      	mov	r6, r2
 8003566:	4699      	mov	r9, r3
 8003568:	688a      	ldr	r2, [r1, #8]
 800356a:	690b      	ldr	r3, [r1, #16]
 800356c:	4607      	mov	r7, r0
 800356e:	4293      	cmp	r3, r2
 8003570:	bfb8      	it	lt
 8003572:	4613      	movlt	r3, r2
 8003574:	6033      	str	r3, [r6, #0]
 8003576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800357a:	460c      	mov	r4, r1
 800357c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003580:	b10a      	cbz	r2, 8003586 <_printf_common+0x26>
 8003582:	3301      	adds	r3, #1
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	0699      	lsls	r1, r3, #26
 800358a:	bf42      	ittt	mi
 800358c:	6833      	ldrmi	r3, [r6, #0]
 800358e:	3302      	addmi	r3, #2
 8003590:	6033      	strmi	r3, [r6, #0]
 8003592:	6825      	ldr	r5, [r4, #0]
 8003594:	f015 0506 	ands.w	r5, r5, #6
 8003598:	d106      	bne.n	80035a8 <_printf_common+0x48>
 800359a:	f104 0a19 	add.w	sl, r4, #25
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	6832      	ldr	r2, [r6, #0]
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	dc28      	bgt.n	80035fa <_printf_common+0x9a>
 80035a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035ac:	1e13      	subs	r3, r2, #0
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	bf18      	it	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	0692      	lsls	r2, r2, #26
 80035b6:	d42d      	bmi.n	8003614 <_printf_common+0xb4>
 80035b8:	4649      	mov	r1, r9
 80035ba:	4638      	mov	r0, r7
 80035bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c0:	47c0      	blx	r8
 80035c2:	3001      	adds	r0, #1
 80035c4:	d020      	beq.n	8003608 <_printf_common+0xa8>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	68e5      	ldr	r5, [r4, #12]
 80035ca:	f003 0306 	and.w	r3, r3, #6
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf18      	it	ne
 80035d2:	2500      	movne	r5, #0
 80035d4:	6832      	ldr	r2, [r6, #0]
 80035d6:	f04f 0600 	mov.w	r6, #0
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	bf08      	it	eq
 80035de:	1aad      	subeq	r5, r5, r2
 80035e0:	6922      	ldr	r2, [r4, #16]
 80035e2:	bf08      	it	eq
 80035e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bfc4      	itt	gt
 80035ec:	1a9b      	subgt	r3, r3, r2
 80035ee:	18ed      	addgt	r5, r5, r3
 80035f0:	341a      	adds	r4, #26
 80035f2:	42b5      	cmp	r5, r6
 80035f4:	d11a      	bne.n	800362c <_printf_common+0xcc>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e008      	b.n	800360c <_printf_common+0xac>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	4649      	mov	r1, r9
 8003600:	4638      	mov	r0, r7
 8003602:	47c0      	blx	r8
 8003604:	3001      	adds	r0, #1
 8003606:	d103      	bne.n	8003610 <_printf_common+0xb0>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003610:	3501      	adds	r5, #1
 8003612:	e7c4      	b.n	800359e <_printf_common+0x3e>
 8003614:	2030      	movs	r0, #48	; 0x30
 8003616:	18e1      	adds	r1, r4, r3
 8003618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003622:	4422      	add	r2, r4
 8003624:	3302      	adds	r3, #2
 8003626:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800362a:	e7c5      	b.n	80035b8 <_printf_common+0x58>
 800362c:	2301      	movs	r3, #1
 800362e:	4622      	mov	r2, r4
 8003630:	4649      	mov	r1, r9
 8003632:	4638      	mov	r0, r7
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d0e6      	beq.n	8003608 <_printf_common+0xa8>
 800363a:	3601      	adds	r6, #1
 800363c:	e7d9      	b.n	80035f2 <_printf_common+0x92>
	...

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	4691      	mov	r9, r2
 8003648:	2f78      	cmp	r7, #120	; 0x78
 800364a:	4680      	mov	r8, r0
 800364c:	460c      	mov	r4, r1
 800364e:	469a      	mov	sl, r3
 8003650:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	; 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d9 	beq.w	8003814 <_printf_i+0x1d4>
 8003662:	2f58      	cmp	r7, #88	; 0x58
 8003664:	f000 80a4 	beq.w	80037b0 <_printf_i+0x170>
 8003668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	; (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037fb 	.word	0x080037fb
 80036b0:	0800371d 	.word	0x0800371d
 80036b4:	080037dd 	.word	0x080037dd
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	0800381d 	.word	0x0800381d
 80036c4:	08003669 	.word	0x08003669
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037e5 	.word	0x080037e5
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	602a      	str	r2, [r5, #0]
 80036e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0a4      	b.n	8003836 <_printf_i+0x1f6>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	0606      	lsls	r6, r0, #24
 80036f2:	f101 0304 	add.w	r3, r1, #4
 80036f6:	d50a      	bpl.n	800370e <_printf_i+0xce>
 80036f8:	680e      	ldr	r6, [r1, #0]
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	da03      	bge.n	8003708 <_printf_i+0xc8>
 8003700:	232d      	movs	r3, #45	; 0x2d
 8003702:	4276      	negs	r6, r6
 8003704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003708:	230a      	movs	r3, #10
 800370a:	485e      	ldr	r0, [pc, #376]	; (8003884 <_printf_i+0x244>)
 800370c:	e019      	b.n	8003742 <_printf_i+0x102>
 800370e:	680e      	ldr	r6, [r1, #0]
 8003710:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	bf18      	it	ne
 8003718:	b236      	sxthne	r6, r6
 800371a:	e7ef      	b.n	80036fc <_printf_i+0xbc>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	6029      	str	r1, [r5, #0]
 8003724:	0601      	lsls	r1, r0, #24
 8003726:	d501      	bpl.n	800372c <_printf_i+0xec>
 8003728:	681e      	ldr	r6, [r3, #0]
 800372a:	e002      	b.n	8003732 <_printf_i+0xf2>
 800372c:	0646      	lsls	r6, r0, #25
 800372e:	d5fb      	bpl.n	8003728 <_printf_i+0xe8>
 8003730:	881e      	ldrh	r6, [r3, #0]
 8003732:	2f6f      	cmp	r7, #111	; 0x6f
 8003734:	bf0c      	ite	eq
 8003736:	2308      	moveq	r3, #8
 8003738:	230a      	movne	r3, #10
 800373a:	4852      	ldr	r0, [pc, #328]	; (8003884 <_printf_i+0x244>)
 800373c:	2100      	movs	r1, #0
 800373e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003742:	6865      	ldr	r5, [r4, #4]
 8003744:	2d00      	cmp	r5, #0
 8003746:	bfa8      	it	ge
 8003748:	6821      	ldrge	r1, [r4, #0]
 800374a:	60a5      	str	r5, [r4, #8]
 800374c:	bfa4      	itt	ge
 800374e:	f021 0104 	bicge.w	r1, r1, #4
 8003752:	6021      	strge	r1, [r4, #0]
 8003754:	b90e      	cbnz	r6, 800375a <_printf_i+0x11a>
 8003756:	2d00      	cmp	r5, #0
 8003758:	d04d      	beq.n	80037f6 <_printf_i+0x1b6>
 800375a:	4615      	mov	r5, r2
 800375c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003760:	fb03 6711 	mls	r7, r3, r1, r6
 8003764:	5dc7      	ldrb	r7, [r0, r7]
 8003766:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800376a:	4637      	mov	r7, r6
 800376c:	42bb      	cmp	r3, r7
 800376e:	460e      	mov	r6, r1
 8003770:	d9f4      	bls.n	800375c <_printf_i+0x11c>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10b      	bne.n	800378e <_printf_i+0x14e>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	07de      	lsls	r6, r3, #31
 800377a:	d508      	bpl.n	800378e <_printf_i+0x14e>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	6861      	ldr	r1, [r4, #4]
 8003780:	4299      	cmp	r1, r3
 8003782:	bfde      	ittt	le
 8003784:	2330      	movle	r3, #48	; 0x30
 8003786:	f805 3c01 	strble.w	r3, [r5, #-1]
 800378a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800378e:	1b52      	subs	r2, r2, r5
 8003790:	6122      	str	r2, [r4, #16]
 8003792:	464b      	mov	r3, r9
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f8cd a000 	str.w	sl, [sp]
 800379c:	aa03      	add	r2, sp, #12
 800379e:	f7ff fedf 	bl	8003560 <_printf_common>
 80037a2:	3001      	adds	r0, #1
 80037a4:	d14c      	bne.n	8003840 <_printf_i+0x200>
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	b004      	add	sp, #16
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	4834      	ldr	r0, [pc, #208]	; (8003884 <_printf_i+0x244>)
 80037b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b6:	6829      	ldr	r1, [r5, #0]
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80037be:	6029      	str	r1, [r5, #0]
 80037c0:	061d      	lsls	r5, r3, #24
 80037c2:	d514      	bpl.n	80037ee <_printf_i+0x1ae>
 80037c4:	07df      	lsls	r7, r3, #31
 80037c6:	bf44      	itt	mi
 80037c8:	f043 0320 	orrmi.w	r3, r3, #32
 80037cc:	6023      	strmi	r3, [r4, #0]
 80037ce:	b91e      	cbnz	r6, 80037d8 <_printf_i+0x198>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	f023 0320 	bic.w	r3, r3, #32
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	2310      	movs	r3, #16
 80037da:	e7af      	b.n	800373c <_printf_i+0xfc>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f043 0320 	orr.w	r3, r3, #32
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	2378      	movs	r3, #120	; 0x78
 80037e6:	4828      	ldr	r0, [pc, #160]	; (8003888 <_printf_i+0x248>)
 80037e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ec:	e7e3      	b.n	80037b6 <_printf_i+0x176>
 80037ee:	0659      	lsls	r1, r3, #25
 80037f0:	bf48      	it	mi
 80037f2:	b2b6      	uxthmi	r6, r6
 80037f4:	e7e6      	b.n	80037c4 <_printf_i+0x184>
 80037f6:	4615      	mov	r5, r2
 80037f8:	e7bb      	b.n	8003772 <_printf_i+0x132>
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	6826      	ldr	r6, [r4, #0]
 80037fe:	1d18      	adds	r0, r3, #4
 8003800:	6961      	ldr	r1, [r4, #20]
 8003802:	6028      	str	r0, [r5, #0]
 8003804:	0635      	lsls	r5, r6, #24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	d501      	bpl.n	800380e <_printf_i+0x1ce>
 800380a:	6019      	str	r1, [r3, #0]
 800380c:	e002      	b.n	8003814 <_printf_i+0x1d4>
 800380e:	0670      	lsls	r0, r6, #25
 8003810:	d5fb      	bpl.n	800380a <_printf_i+0x1ca>
 8003812:	8019      	strh	r1, [r3, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	4615      	mov	r5, r2
 8003818:	6123      	str	r3, [r4, #16]
 800381a:	e7ba      	b.n	8003792 <_printf_i+0x152>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	2100      	movs	r1, #0
 8003820:	1d1a      	adds	r2, r3, #4
 8003822:	602a      	str	r2, [r5, #0]
 8003824:	681d      	ldr	r5, [r3, #0]
 8003826:	6862      	ldr	r2, [r4, #4]
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f8d9 	bl	80039e0 <memchr>
 800382e:	b108      	cbz	r0, 8003834 <_printf_i+0x1f4>
 8003830:	1b40      	subs	r0, r0, r5
 8003832:	6060      	str	r0, [r4, #4]
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2300      	movs	r3, #0
 800383a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383e:	e7a8      	b.n	8003792 <_printf_i+0x152>
 8003840:	462a      	mov	r2, r5
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	47d0      	blx	sl
 800384a:	3001      	adds	r0, #1
 800384c:	d0ab      	beq.n	80037a6 <_printf_i+0x166>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	079b      	lsls	r3, r3, #30
 8003852:	d413      	bmi.n	800387c <_printf_i+0x23c>
 8003854:	68e0      	ldr	r0, [r4, #12]
 8003856:	9b03      	ldr	r3, [sp, #12]
 8003858:	4298      	cmp	r0, r3
 800385a:	bfb8      	it	lt
 800385c:	4618      	movlt	r0, r3
 800385e:	e7a4      	b.n	80037aa <_printf_i+0x16a>
 8003860:	2301      	movs	r3, #1
 8003862:	4632      	mov	r2, r6
 8003864:	4649      	mov	r1, r9
 8003866:	4640      	mov	r0, r8
 8003868:	47d0      	blx	sl
 800386a:	3001      	adds	r0, #1
 800386c:	d09b      	beq.n	80037a6 <_printf_i+0x166>
 800386e:	3501      	adds	r5, #1
 8003870:	68e3      	ldr	r3, [r4, #12]
 8003872:	9903      	ldr	r1, [sp, #12]
 8003874:	1a5b      	subs	r3, r3, r1
 8003876:	42ab      	cmp	r3, r5
 8003878:	dcf2      	bgt.n	8003860 <_printf_i+0x220>
 800387a:	e7eb      	b.n	8003854 <_printf_i+0x214>
 800387c:	2500      	movs	r5, #0
 800387e:	f104 0619 	add.w	r6, r4, #25
 8003882:	e7f5      	b.n	8003870 <_printf_i+0x230>
 8003884:	08003b11 	.word	0x08003b11
 8003888:	08003b22 	.word	0x08003b22

0800388c <_sbrk_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	2300      	movs	r3, #0
 8003890:	4d05      	ldr	r5, [pc, #20]	; (80038a8 <_sbrk_r+0x1c>)
 8003892:	4604      	mov	r4, r0
 8003894:	4608      	mov	r0, r1
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	f7fd fb28 	bl	8000eec <_sbrk>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_sbrk_r+0x1a>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_sbrk_r+0x1a>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	200001cc 	.word	0x200001cc

080038ac <__sread>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	460c      	mov	r4, r1
 80038b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b4:	f000 f8ae 	bl	8003a14 <_read_r>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	bfab      	itete	ge
 80038bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038be:	89a3      	ldrhlt	r3, [r4, #12]
 80038c0:	181b      	addge	r3, r3, r0
 80038c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038c6:	bfac      	ite	ge
 80038c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038ca:	81a3      	strhlt	r3, [r4, #12]
 80038cc:	bd10      	pop	{r4, pc}

080038ce <__swrite>:
 80038ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d2:	461f      	mov	r7, r3
 80038d4:	898b      	ldrh	r3, [r1, #12]
 80038d6:	4605      	mov	r5, r0
 80038d8:	05db      	lsls	r3, r3, #23
 80038da:	460c      	mov	r4, r1
 80038dc:	4616      	mov	r6, r2
 80038de:	d505      	bpl.n	80038ec <__swrite+0x1e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	2200      	movs	r2, #0
 80038e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e8:	f000 f868 	bl	80039bc <_lseek_r>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	4632      	mov	r2, r6
 80038f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	4628      	mov	r0, r5
 80038f8:	463b      	mov	r3, r7
 80038fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003902:	f000 b817 	b.w	8003934 <_write_r>

08003906 <__sseek>:
 8003906:	b510      	push	{r4, lr}
 8003908:	460c      	mov	r4, r1
 800390a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390e:	f000 f855 	bl	80039bc <_lseek_r>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	bf15      	itete	ne
 8003918:	6560      	strne	r0, [r4, #84]	; 0x54
 800391a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800391e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003922:	81a3      	strheq	r3, [r4, #12]
 8003924:	bf18      	it	ne
 8003926:	81a3      	strhne	r3, [r4, #12]
 8003928:	bd10      	pop	{r4, pc}

0800392a <__sclose>:
 800392a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800392e:	f000 b813 	b.w	8003958 <_close_r>
	...

08003934 <_write_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	2200      	movs	r2, #0
 800393e:	4d05      	ldr	r5, [pc, #20]	; (8003954 <_write_r+0x20>)
 8003940:	602a      	str	r2, [r5, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f7fd fa86 	bl	8000e54 <_write>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_write_r+0x1e>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_write_r+0x1e>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	200001cc 	.word	0x200001cc

08003958 <_close_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	2300      	movs	r3, #0
 800395c:	4d05      	ldr	r5, [pc, #20]	; (8003974 <_close_r+0x1c>)
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fd fa92 	bl	8000e8c <_close>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_close_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_close_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200001cc 	.word	0x200001cc

08003978 <_fstat_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	2300      	movs	r3, #0
 800397c:	4d06      	ldr	r5, [pc, #24]	; (8003998 <_fstat_r+0x20>)
 800397e:	4604      	mov	r4, r0
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	f7fd fa8c 	bl	8000ea2 <_fstat>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d102      	bne.n	8003994 <_fstat_r+0x1c>
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	b103      	cbz	r3, 8003994 <_fstat_r+0x1c>
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	bd38      	pop	{r3, r4, r5, pc}
 8003996:	bf00      	nop
 8003998:	200001cc 	.word	0x200001cc

0800399c <_isatty_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	2300      	movs	r3, #0
 80039a0:	4d05      	ldr	r5, [pc, #20]	; (80039b8 <_isatty_r+0x1c>)
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7fd fa8a 	bl	8000ec0 <_isatty>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_isatty_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_isatty_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	200001cc 	.word	0x200001cc

080039bc <_lseek_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	2200      	movs	r2, #0
 80039c6:	4d05      	ldr	r5, [pc, #20]	; (80039dc <_lseek_r+0x20>)
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7fd fa82 	bl	8000ed4 <_lseek>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_lseek_r+0x1e>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_lseek_r+0x1e>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	200001cc 	.word	0x200001cc

080039e0 <memchr>:
 80039e0:	4603      	mov	r3, r0
 80039e2:	b510      	push	{r4, lr}
 80039e4:	b2c9      	uxtb	r1, r1
 80039e6:	4402      	add	r2, r0
 80039e8:	4293      	cmp	r3, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	d101      	bne.n	80039f2 <memchr+0x12>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e003      	b.n	80039fa <memchr+0x1a>
 80039f2:	7804      	ldrb	r4, [r0, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	428c      	cmp	r4, r1
 80039f8:	d1f6      	bne.n	80039e8 <memchr+0x8>
 80039fa:	bd10      	pop	{r4, pc}

080039fc <__malloc_lock>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__malloc_lock+0x8>)
 80039fe:	f7ff bb13 	b.w	8003028 <__retarget_lock_acquire_recursive>
 8003a02:	bf00      	nop
 8003a04:	200001c0 	.word	0x200001c0

08003a08 <__malloc_unlock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_unlock+0x8>)
 8003a0a:	f7ff bb0e 	b.w	800302a <__retarget_lock_release_recursive>
 8003a0e:	bf00      	nop
 8003a10:	200001c0 	.word	0x200001c0

08003a14 <_read_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4d05      	ldr	r5, [pc, #20]	; (8003a34 <_read_r+0x20>)
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fd f9f9 	bl	8000e1a <_read>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_read_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_read_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	200001cc 	.word	0x200001cc

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
